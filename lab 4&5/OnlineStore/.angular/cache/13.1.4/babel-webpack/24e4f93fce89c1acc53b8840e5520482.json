{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst events_1 = require(\"events\");\n\nconst q = require(\"q\");\n\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nconst util = require(\"util\");\n\nconst browser_1 = require(\"./browser\");\n\nconst driverProviders_1 = require(\"./driverProviders\");\n\nconst logger_1 = require(\"./logger\");\n\nconst plugins_1 = require(\"./plugins\");\n\nconst ptor_1 = require(\"./ptor\");\n\nconst helper = require(\"./util\");\n\nlet logger = new logger_1.Logger('runner');\n/*\n * Runner is responsible for starting the execution of a test run and triggering\n * setup, teardown, managing config, etc through its various dependencies.\n *\n * The Protractor Runner is a node EventEmitter with the following events:\n * - testPass\n * - testFail\n * - testsDone\n *\n * @param {Object} config\n * @constructor\n */\n\nclass Runner extends events_1.EventEmitter {\n  constructor(config) {\n    super();\n    /**\n     * Responsible for cleaning up test run and exiting the process.\n     * @private\n     * @param {int} Standard unix exit code\n     */\n\n    this.exit_ = function (exitCode) {\n      return helper.runFilenameOrFn_(this.config_.configDir, this.config_.onCleanUp, [exitCode]).then(returned => {\n        if (typeof returned === 'number') {\n          return returned;\n        } else {\n          return exitCode;\n        }\n      });\n    };\n\n    this.config_ = config;\n\n    if (config.v8Debug) {\n      // Call this private function instead of sending SIGUSR1 because Windows.\n      process['_debugProcess'](process.pid);\n    }\n\n    if (config.nodeDebug) {\n      process['_debugProcess'](process.pid);\n      let flow = selenium_webdriver_1.promise.controlFlow();\n      this.ready_ = flow.execute(() => {\n        let nodedebug = require('child_process').fork('debug', ['localhost:5858']);\n\n        process.on('exit', function () {\n          nodedebug.kill('SIGTERM');\n        });\n        nodedebug.on('exit', function () {\n          process.exit(1);\n        });\n      }, 'start the node debugger').then(() => {\n        return flow.timeout(1000, 'waiting for debugger to attach');\n      });\n    }\n\n    if (config.capabilities && config.capabilities.seleniumAddress) {\n      config.seleniumAddress = config.capabilities.seleniumAddress;\n    }\n\n    this.loadDriverProvider_(config);\n    this.setTestPreparer(config.onPrepare);\n  }\n  /**\n   * Registrar for testPreparers - executed right before tests run.\n   * @public\n   * @param {string/Fn} filenameOrFn\n   */\n\n\n  setTestPreparer(filenameOrFn) {\n    this.preparer_ = filenameOrFn;\n  }\n  /**\n   * Executor of testPreparer\n   * @public\n   * @param {string[]=} An optional list of command line arguments the framework will accept.\n   * @return {q.Promise} A promise that will resolve when the test preparers\n   *     are finished.\n   */\n\n\n  runTestPreparer(extraFlags) {\n    let unknownFlags = this.config_.unknownFlags_ || [];\n\n    if (extraFlags) {\n      unknownFlags = unknownFlags.filter(f => extraFlags.indexOf(f) === -1);\n    }\n\n    if (unknownFlags.length > 0 && !this.config_.disableChecks) {\n      // TODO: Make this throw a ConfigError in Protractor 6.\n      logger.warn('Ignoring unknown extra flags: ' + unknownFlags.join(', ') + '. This will be' + ' an error in future versions, please use --disableChecks flag to disable the ' + ' Protractor CLI flag checks. ');\n    }\n\n    return this.plugins_.onPrepare().then(() => {\n      return helper.runFilenameOrFn_(this.config_.configDir, this.preparer_);\n    });\n  }\n  /**\n   * Called after each test finishes.\n   *\n   * Responsible for `restartBrowserBetweenTests`\n   *\n   * @public\n   * @return {q.Promise} A promise that will resolve when the work here is done\n   */\n\n\n  afterEach() {\n    let ret;\n    this.frameworkUsesAfterEach = true;\n\n    if (this.config_.restartBrowserBetweenTests) {\n      this.restartPromise = this.restartPromise || q(ptor_1.protractor.browser.restart());\n      ret = this.restartPromise;\n      this.restartPromise = undefined;\n    }\n\n    return ret || q();\n  }\n  /**\n   * Grab driver provider based on type\n   * @private\n   *\n   * Priority\n   * 1) if directConnect is true, use that\n   * 2) if seleniumAddress is given, use that\n   * 3) if a Sauce Labs account is given, use that\n   * 4) if a seleniumServerJar is specified, use that\n   * 5) try to find the seleniumServerJar in protractor/selenium\n   */\n\n\n  loadDriverProvider_(config) {\n    this.config_ = config;\n    this.driverprovider_ = driverProviders_1.buildDriverProvider(this.config_);\n  }\n  /**\n   * Getter for the Runner config object\n   * @public\n   * @return {Object} config\n   */\n\n\n  getConfig() {\n    return this.config_;\n  }\n  /**\n   * Get the control flow used by this runner.\n   * @return {Object} WebDriver control flow.\n   */\n\n\n  controlFlow() {\n    return selenium_webdriver_1.promise.controlFlow();\n  }\n  /**\n   * Sets up convenience globals for test specs\n   * @private\n   */\n\n\n  setupGlobals_(browser_) {\n    // Keep $, $$, element, and by/By under the global protractor namespace\n    ptor_1.protractor.browser = browser_;\n    ptor_1.protractor.$ = browser_.$;\n    ptor_1.protractor.$$ = browser_.$$;\n    ptor_1.protractor.element = browser_.element;\n    ptor_1.protractor.by = ptor_1.protractor.By = browser_1.ProtractorBrowser.By;\n    ptor_1.protractor.ExpectedConditions = browser_.ExpectedConditions;\n\n    if (!this.config_.noGlobals) {\n      // Export protractor to the global namespace to be used in tests.\n      global.browser = browser_;\n      global.$ = browser_.$;\n      global.$$ = browser_.$$;\n      global.element = browser_.element;\n      global.by = global.By = ptor_1.protractor.By;\n      global.ExpectedConditions = ptor_1.protractor.ExpectedConditions;\n    }\n\n    global.protractor = ptor_1.protractor;\n\n    if (!this.config_.skipSourceMapSupport) {\n      // Enable sourcemap support for stack traces.\n      require('source-map-support').install();\n    } // Required by dart2js machinery.\n    // https://code.google.com/p/dart/source/browse/branches/bleeding_edge/dart/sdk/lib/js/dart2js/js_dart2js.dart?spec=svn32943&r=32943#487\n\n\n    global.DartObject = function (o) {\n      this.o = o;\n    };\n  }\n  /**\n   * Create a new driver from a driverProvider. Then set up a\n   * new protractor instance using this driver.\n   * This is used to set up the initial protractor instances and any\n   * future ones.\n   *\n   * @param {Plugin} plugins The plugin functions\n   * @param {ProtractorBrowser=} parentBrowser The browser which spawned this one\n   *\n   * @return {Protractor} a protractor instance.\n   * @public\n   */\n\n\n  createBrowser(plugins, parentBrowser) {\n    let config = this.config_;\n    let driver = this.driverprovider_.getNewDriver();\n    let blockingProxyUrl;\n\n    if (config.useBlockingProxy) {\n      blockingProxyUrl = this.driverprovider_.getBPUrl();\n    }\n\n    let initProperties = {\n      baseUrl: config.baseUrl,\n      rootElement: config.rootElement,\n      untrackOutstandingTimeouts: config.untrackOutstandingTimeouts,\n      params: config.params,\n      getPageTimeout: config.getPageTimeout,\n      allScriptsTimeout: config.allScriptsTimeout,\n      debuggerServerPort: config.debuggerServerPort,\n      ng12Hybrid: config.ng12Hybrid,\n      waitForAngularEnabled: true\n    };\n\n    if (parentBrowser) {\n      initProperties.baseUrl = parentBrowser.baseUrl;\n      initProperties.rootElement = parentBrowser.angularAppRoot();\n      initProperties.untrackOutstandingTimeouts = !parentBrowser.trackOutstandingTimeouts_;\n      initProperties.params = parentBrowser.params;\n      initProperties.getPageTimeout = parentBrowser.getPageTimeout;\n      initProperties.allScriptsTimeout = parentBrowser.allScriptsTimeout;\n      initProperties.debuggerServerPort = parentBrowser.debuggerServerPort;\n      initProperties.ng12Hybrid = parentBrowser.ng12Hybrid;\n      initProperties.waitForAngularEnabled = parentBrowser.waitForAngularEnabled();\n    }\n\n    let browser_ = new browser_1.ProtractorBrowser(driver, initProperties.baseUrl, initProperties.rootElement, initProperties.untrackOutstandingTimeouts, blockingProxyUrl);\n    browser_.params = initProperties.params;\n    browser_.plugins_ = plugins || new plugins_1.Plugins({});\n\n    if (initProperties.getPageTimeout) {\n      browser_.getPageTimeout = initProperties.getPageTimeout;\n    }\n\n    if (initProperties.allScriptsTimeout) {\n      browser_.allScriptsTimeout = initProperties.allScriptsTimeout;\n    }\n\n    if (initProperties.debuggerServerPort) {\n      browser_.debuggerServerPort = initProperties.debuggerServerPort;\n    }\n\n    if (initProperties.ng12Hybrid) {\n      browser_.ng12Hybrid = initProperties.ng12Hybrid;\n    }\n\n    browser_.ready = browser_.ready.then(() => {\n      return browser_.waitForAngularEnabled(initProperties.waitForAngularEnabled);\n    }).then(() => {\n      return driver.manage().timeouts().setScriptTimeout(initProperties.allScriptsTimeout || 0);\n    }).then(() => {\n      return browser_;\n    });\n\n    browser_.getProcessedConfig = () => {\n      return selenium_webdriver_1.promise.when(config);\n    };\n\n    browser_.forkNewDriverInstance = (useSameUrl, copyMockModules, copyConfigUpdates = true) => {\n      let newBrowser = this.createBrowser(plugins);\n\n      if (copyMockModules) {\n        newBrowser.mockModules_ = browser_.mockModules_;\n      }\n\n      if (useSameUrl) {\n        newBrowser.ready = newBrowser.ready.then(() => {\n          return browser_.driver.getCurrentUrl();\n        }).then(url => {\n          return newBrowser.get(url);\n        }).then(() => {\n          return newBrowser;\n        });\n      }\n\n      return newBrowser;\n    };\n\n    let replaceBrowser = () => {\n      let newBrowser = browser_.forkNewDriverInstance(false, true);\n\n      if (browser_ === ptor_1.protractor.browser) {\n        this.setupGlobals_(newBrowser);\n      }\n\n      return newBrowser;\n    };\n\n    browser_.restart = () => {\n      // Note: because tests are not paused at this point, any async\n      // calls here are not guaranteed to complete before the tests resume.\n      // Seperate solutions depending on if the control flow is enabled (see lib/browser.ts)\n      if (browser_.controlFlowIsEnabled()) {\n        return browser_.restartSync().ready;\n      } else {\n        return this.driverprovider_.quitDriver(browser_.driver).then(replaceBrowser).then(newBrowser => newBrowser.ready);\n      }\n    };\n\n    browser_.restartSync = () => {\n      if (!browser_.controlFlowIsEnabled()) {\n        throw TypeError('Unable to use `browser.restartSync()` when the control flow is disabled');\n      }\n\n      this.driverprovider_.quitDriver(browser_.driver);\n      return replaceBrowser();\n    };\n\n    return browser_;\n  }\n  /**\n   * Final cleanup on exiting the runner.\n   *\n   * @return {q.Promise} A promise which resolves on finish.\n   * @private\n   */\n\n\n  shutdown_() {\n    return driverProviders_1.DriverProvider.quitDrivers(this.driverprovider_, this.driverprovider_.getExistingDrivers());\n  }\n  /**\n   * The primary workhorse interface. Kicks off the test running process.\n   *\n   * @return {q.Promise} A promise which resolves to the exit code of the tests.\n   * @public\n   */\n\n\n  run() {\n    let testPassed;\n    let plugins = this.plugins_ = new plugins_1.Plugins(this.config_);\n    let pluginPostTestPromises;\n    let browser_;\n    let results;\n\n    if (this.config_.framework !== 'explorer' && !this.config_.specs.length) {\n      throw new Error('Spec patterns did not match any files.');\n    }\n\n    if (this.config_.SELENIUM_PROMISE_MANAGER != null) {\n      selenium_webdriver_1.promise.USE_PROMISE_MANAGER = this.config_.SELENIUM_PROMISE_MANAGER;\n    }\n\n    if (this.config_.webDriverLogDir || this.config_.highlightDelay) {\n      this.config_.useBlockingProxy = true;\n    } // 0) Wait for debugger\n\n\n    return q(this.ready_).then(() => {\n      // 1) Setup environment\n      // noinspection JSValidateTypes\n      return this.driverprovider_.setupEnv();\n    }).then(() => {\n      // 2) Create a browser and setup globals\n      browser_ = this.createBrowser(plugins);\n      this.setupGlobals_(browser_);\n      return browser_.ready.then(browser_.getSession).then(session => {\n        logger.debug('WebDriver session successfully started with capabilities ' + util.inspect(session.getCapabilities()));\n      }, err => {\n        logger.error('Unable to start a WebDriver session.');\n        throw err;\n      }); // 3) Setup plugins\n    }).then(() => {\n      return plugins.setup(); // 4) Execute test cases\n    }).then(() => {\n      // Do the framework setup here so that jasmine and mocha globals are\n      // available to the onPrepare function.\n      let frameworkPath = '';\n\n      if (this.config_.framework === 'jasmine' || this.config_.framework === 'jasmine2') {\n        frameworkPath = './frameworks/jasmine.js';\n      } else if (this.config_.framework === 'mocha') {\n        frameworkPath = './frameworks/mocha.js';\n      } else if (this.config_.framework === 'debugprint') {\n        // Private framework. Do not use.\n        frameworkPath = './frameworks/debugprint.js';\n      } else if (this.config_.framework === 'explorer') {\n        // Private framework. Do not use.\n        frameworkPath = './frameworks/explorer.js';\n      } else if (this.config_.framework === 'custom') {\n        if (!this.config_.frameworkPath) {\n          throw new Error('When config.framework is custom, ' + 'config.frameworkPath is required.');\n        }\n\n        frameworkPath = this.config_.frameworkPath;\n      } else {\n        throw new Error('config.framework (' + this.config_.framework + ') is not a valid framework.');\n      }\n\n      if (this.config_.restartBrowserBetweenTests) {\n        // TODO(sjelin): replace with warnings once `afterEach` support is required\n        let restartDriver = () => {\n          if (!this.frameworkUsesAfterEach) {\n            this.restartPromise = q(browser_.restart());\n          }\n        };\n\n        this.on('testPass', restartDriver);\n        this.on('testFail', restartDriver);\n      } // We need to save these promises to make sure they're run, but we\n      // don't\n      // want to delay starting the next test (because we can't, it's just\n      // an event emitter).\n\n\n      pluginPostTestPromises = [];\n      this.on('testPass', testInfo => {\n        pluginPostTestPromises.push(plugins.postTest(true, testInfo));\n      });\n      this.on('testFail', testInfo => {\n        pluginPostTestPromises.push(plugins.postTest(false, testInfo));\n      });\n      logger.debug('Running with spec files ' + this.config_.specs);\n      return require(frameworkPath).run(this, this.config_.specs); // 5) Wait for postTest plugins to finish\n    }).then(testResults => {\n      results = testResults;\n      return q.all(pluginPostTestPromises); // 6) Teardown plugins\n    }).then(() => {\n      return plugins.teardown(); // 7) Teardown\n    }).then(() => {\n      results = helper.joinTestLogs(results, plugins.getResults());\n      this.emit('testsDone', results);\n      testPassed = results.failedCount === 0;\n\n      if (this.driverprovider_.updateJob) {\n        return this.driverprovider_.updateJob({\n          'passed': testPassed\n        }).then(() => {\n          return this.driverprovider_.teardownEnv();\n        });\n      } else {\n        return this.driverprovider_.teardownEnv();\n      } // 8) Let plugins do final cleanup\n\n    }).then(() => {\n      return plugins.postResults(); // 9) Exit process\n    }).then(() => {\n      let exitCode = testPassed ? 0 : 1;\n      return this.exit_(exitCode);\n    }).fin(() => {\n      return this.shutdown_();\n    });\n  }\n\n}\n\nexports.Runner = Runner;","map":{"version":3,"sources":["/Users/dariya/Documents/GitHub/Web-development/lab 4&5/wgg87w--run/node_modules/protractor/built/runner.js"],"names":["Object","defineProperty","exports","value","events_1","require","q","selenium_webdriver_1","util","browser_1","driverProviders_1","logger_1","plugins_1","ptor_1","helper","logger","Logger","Runner","EventEmitter","constructor","config","exit_","exitCode","runFilenameOrFn_","config_","configDir","onCleanUp","then","returned","v8Debug","process","pid","nodeDebug","flow","promise","controlFlow","ready_","execute","nodedebug","fork","on","kill","exit","timeout","capabilities","seleniumAddress","loadDriverProvider_","setTestPreparer","onPrepare","filenameOrFn","preparer_","runTestPreparer","extraFlags","unknownFlags","unknownFlags_","filter","f","indexOf","length","disableChecks","warn","join","plugins_","afterEach","ret","frameworkUsesAfterEach","restartBrowserBetweenTests","restartPromise","protractor","browser","restart","undefined","driverprovider_","buildDriverProvider","getConfig","setupGlobals_","browser_","$","$$","element","by","By","ProtractorBrowser","ExpectedConditions","noGlobals","global","skipSourceMapSupport","install","DartObject","o","createBrowser","plugins","parentBrowser","driver","getNewDriver","blockingProxyUrl","useBlockingProxy","getBPUrl","initProperties","baseUrl","rootElement","untrackOutstandingTimeouts","params","getPageTimeout","allScriptsTimeout","debuggerServerPort","ng12Hybrid","waitForAngularEnabled","angularAppRoot","trackOutstandingTimeouts_","Plugins","ready","manage","timeouts","setScriptTimeout","getProcessedConfig","when","forkNewDriverInstance","useSameUrl","copyMockModules","copyConfigUpdates","newBrowser","mockModules_","getCurrentUrl","url","get","replaceBrowser","controlFlowIsEnabled","restartSync","quitDriver","TypeError","shutdown_","DriverProvider","quitDrivers","getExistingDrivers","run","testPassed","pluginPostTestPromises","results","framework","specs","Error","SELENIUM_PROMISE_MANAGER","USE_PROMISE_MANAGER","webDriverLogDir","highlightDelay","setupEnv","getSession","session","debug","inspect","getCapabilities","err","error","setup","frameworkPath","restartDriver","testInfo","push","postTest","testResults","all","teardown","joinTestLogs","getResults","emit","failedCount","updateJob","teardownEnv","postResults","fin"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst events_1 = require(\"events\");\nconst q = require(\"q\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst util = require(\"util\");\nconst browser_1 = require(\"./browser\");\nconst driverProviders_1 = require(\"./driverProviders\");\nconst logger_1 = require(\"./logger\");\nconst plugins_1 = require(\"./plugins\");\nconst ptor_1 = require(\"./ptor\");\nconst helper = require(\"./util\");\nlet logger = new logger_1.Logger('runner');\n/*\n * Runner is responsible for starting the execution of a test run and triggering\n * setup, teardown, managing config, etc through its various dependencies.\n *\n * The Protractor Runner is a node EventEmitter with the following events:\n * - testPass\n * - testFail\n * - testsDone\n *\n * @param {Object} config\n * @constructor\n */\nclass Runner extends events_1.EventEmitter {\n    constructor(config) {\n        super();\n        /**\n         * Responsible for cleaning up test run and exiting the process.\n         * @private\n         * @param {int} Standard unix exit code\n         */\n        this.exit_ = function (exitCode) {\n            return helper.runFilenameOrFn_(this.config_.configDir, this.config_.onCleanUp, [exitCode])\n                .then((returned) => {\n                if (typeof returned === 'number') {\n                    return returned;\n                }\n                else {\n                    return exitCode;\n                }\n            });\n        };\n        this.config_ = config;\n        if (config.v8Debug) {\n            // Call this private function instead of sending SIGUSR1 because Windows.\n            process['_debugProcess'](process.pid);\n        }\n        if (config.nodeDebug) {\n            process['_debugProcess'](process.pid);\n            let flow = selenium_webdriver_1.promise.controlFlow();\n            this.ready_ = flow.execute(() => {\n                let nodedebug = require('child_process').fork('debug', ['localhost:5858']);\n                process.on('exit', function () {\n                    nodedebug.kill('SIGTERM');\n                });\n                nodedebug.on('exit', function () {\n                    process.exit(1);\n                });\n            }, 'start the node debugger').then(() => {\n                return flow.timeout(1000, 'waiting for debugger to attach');\n            });\n        }\n        if (config.capabilities && config.capabilities.seleniumAddress) {\n            config.seleniumAddress = config.capabilities.seleniumAddress;\n        }\n        this.loadDriverProvider_(config);\n        this.setTestPreparer(config.onPrepare);\n    }\n    /**\n     * Registrar for testPreparers - executed right before tests run.\n     * @public\n     * @param {string/Fn} filenameOrFn\n     */\n    setTestPreparer(filenameOrFn) {\n        this.preparer_ = filenameOrFn;\n    }\n    /**\n     * Executor of testPreparer\n     * @public\n     * @param {string[]=} An optional list of command line arguments the framework will accept.\n     * @return {q.Promise} A promise that will resolve when the test preparers\n     *     are finished.\n     */\n    runTestPreparer(extraFlags) {\n        let unknownFlags = this.config_.unknownFlags_ || [];\n        if (extraFlags) {\n            unknownFlags = unknownFlags.filter((f) => extraFlags.indexOf(f) === -1);\n        }\n        if (unknownFlags.length > 0 && !this.config_.disableChecks) {\n            // TODO: Make this throw a ConfigError in Protractor 6.\n            logger.warn('Ignoring unknown extra flags: ' + unknownFlags.join(', ') + '. This will be' +\n                ' an error in future versions, please use --disableChecks flag to disable the ' +\n                ' Protractor CLI flag checks. ');\n        }\n        return this.plugins_.onPrepare().then(() => {\n            return helper.runFilenameOrFn_(this.config_.configDir, this.preparer_);\n        });\n    }\n    /**\n     * Called after each test finishes.\n     *\n     * Responsible for `restartBrowserBetweenTests`\n     *\n     * @public\n     * @return {q.Promise} A promise that will resolve when the work here is done\n     */\n    afterEach() {\n        let ret;\n        this.frameworkUsesAfterEach = true;\n        if (this.config_.restartBrowserBetweenTests) {\n            this.restartPromise = this.restartPromise || q(ptor_1.protractor.browser.restart());\n            ret = this.restartPromise;\n            this.restartPromise = undefined;\n        }\n        return ret || q();\n    }\n    /**\n     * Grab driver provider based on type\n     * @private\n     *\n     * Priority\n     * 1) if directConnect is true, use that\n     * 2) if seleniumAddress is given, use that\n     * 3) if a Sauce Labs account is given, use that\n     * 4) if a seleniumServerJar is specified, use that\n     * 5) try to find the seleniumServerJar in protractor/selenium\n     */\n    loadDriverProvider_(config) {\n        this.config_ = config;\n        this.driverprovider_ = driverProviders_1.buildDriverProvider(this.config_);\n    }\n    /**\n     * Getter for the Runner config object\n     * @public\n     * @return {Object} config\n     */\n    getConfig() {\n        return this.config_;\n    }\n    /**\n     * Get the control flow used by this runner.\n     * @return {Object} WebDriver control flow.\n     */\n    controlFlow() {\n        return selenium_webdriver_1.promise.controlFlow();\n    }\n    /**\n     * Sets up convenience globals for test specs\n     * @private\n     */\n    setupGlobals_(browser_) {\n        // Keep $, $$, element, and by/By under the global protractor namespace\n        ptor_1.protractor.browser = browser_;\n        ptor_1.protractor.$ = browser_.$;\n        ptor_1.protractor.$$ = browser_.$$;\n        ptor_1.protractor.element = browser_.element;\n        ptor_1.protractor.by = ptor_1.protractor.By = browser_1.ProtractorBrowser.By;\n        ptor_1.protractor.ExpectedConditions = browser_.ExpectedConditions;\n        if (!this.config_.noGlobals) {\n            // Export protractor to the global namespace to be used in tests.\n            global.browser = browser_;\n            global.$ = browser_.$;\n            global.$$ = browser_.$$;\n            global.element = browser_.element;\n            global.by = global.By = ptor_1.protractor.By;\n            global.ExpectedConditions = ptor_1.protractor.ExpectedConditions;\n        }\n        global.protractor = ptor_1.protractor;\n        if (!this.config_.skipSourceMapSupport) {\n            // Enable sourcemap support for stack traces.\n            require('source-map-support').install();\n        }\n        // Required by dart2js machinery.\n        // https://code.google.com/p/dart/source/browse/branches/bleeding_edge/dart/sdk/lib/js/dart2js/js_dart2js.dart?spec=svn32943&r=32943#487\n        global.DartObject = function (o) {\n            this.o = o;\n        };\n    }\n    /**\n     * Create a new driver from a driverProvider. Then set up a\n     * new protractor instance using this driver.\n     * This is used to set up the initial protractor instances and any\n     * future ones.\n     *\n     * @param {Plugin} plugins The plugin functions\n     * @param {ProtractorBrowser=} parentBrowser The browser which spawned this one\n     *\n     * @return {Protractor} a protractor instance.\n     * @public\n     */\n    createBrowser(plugins, parentBrowser) {\n        let config = this.config_;\n        let driver = this.driverprovider_.getNewDriver();\n        let blockingProxyUrl;\n        if (config.useBlockingProxy) {\n            blockingProxyUrl = this.driverprovider_.getBPUrl();\n        }\n        let initProperties = {\n            baseUrl: config.baseUrl,\n            rootElement: config.rootElement,\n            untrackOutstandingTimeouts: config.untrackOutstandingTimeouts,\n            params: config.params,\n            getPageTimeout: config.getPageTimeout,\n            allScriptsTimeout: config.allScriptsTimeout,\n            debuggerServerPort: config.debuggerServerPort,\n            ng12Hybrid: config.ng12Hybrid,\n            waitForAngularEnabled: true\n        };\n        if (parentBrowser) {\n            initProperties.baseUrl = parentBrowser.baseUrl;\n            initProperties.rootElement = parentBrowser.angularAppRoot();\n            initProperties.untrackOutstandingTimeouts = !parentBrowser.trackOutstandingTimeouts_;\n            initProperties.params = parentBrowser.params;\n            initProperties.getPageTimeout = parentBrowser.getPageTimeout;\n            initProperties.allScriptsTimeout = parentBrowser.allScriptsTimeout;\n            initProperties.debuggerServerPort = parentBrowser.debuggerServerPort;\n            initProperties.ng12Hybrid = parentBrowser.ng12Hybrid;\n            initProperties.waitForAngularEnabled = parentBrowser.waitForAngularEnabled();\n        }\n        let browser_ = new browser_1.ProtractorBrowser(driver, initProperties.baseUrl, initProperties.rootElement, initProperties.untrackOutstandingTimeouts, blockingProxyUrl);\n        browser_.params = initProperties.params;\n        browser_.plugins_ = plugins || new plugins_1.Plugins({});\n        if (initProperties.getPageTimeout) {\n            browser_.getPageTimeout = initProperties.getPageTimeout;\n        }\n        if (initProperties.allScriptsTimeout) {\n            browser_.allScriptsTimeout = initProperties.allScriptsTimeout;\n        }\n        if (initProperties.debuggerServerPort) {\n            browser_.debuggerServerPort = initProperties.debuggerServerPort;\n        }\n        if (initProperties.ng12Hybrid) {\n            browser_.ng12Hybrid = initProperties.ng12Hybrid;\n        }\n        browser_.ready =\n            browser_.ready\n                .then(() => {\n                return browser_.waitForAngularEnabled(initProperties.waitForAngularEnabled);\n            })\n                .then(() => {\n                return driver.manage().timeouts().setScriptTimeout(initProperties.allScriptsTimeout || 0);\n            })\n                .then(() => {\n                return browser_;\n            });\n        browser_.getProcessedConfig = () => {\n            return selenium_webdriver_1.promise.when(config);\n        };\n        browser_.forkNewDriverInstance =\n            (useSameUrl, copyMockModules, copyConfigUpdates = true) => {\n                let newBrowser = this.createBrowser(plugins);\n                if (copyMockModules) {\n                    newBrowser.mockModules_ = browser_.mockModules_;\n                }\n                if (useSameUrl) {\n                    newBrowser.ready = newBrowser.ready\n                        .then(() => {\n                        return browser_.driver.getCurrentUrl();\n                    })\n                        .then((url) => {\n                        return newBrowser.get(url);\n                    })\n                        .then(() => {\n                        return newBrowser;\n                    });\n                }\n                return newBrowser;\n            };\n        let replaceBrowser = () => {\n            let newBrowser = browser_.forkNewDriverInstance(false, true);\n            if (browser_ === ptor_1.protractor.browser) {\n                this.setupGlobals_(newBrowser);\n            }\n            return newBrowser;\n        };\n        browser_.restart = () => {\n            // Note: because tests are not paused at this point, any async\n            // calls here are not guaranteed to complete before the tests resume.\n            // Seperate solutions depending on if the control flow is enabled (see lib/browser.ts)\n            if (browser_.controlFlowIsEnabled()) {\n                return browser_.restartSync().ready;\n            }\n            else {\n                return this.driverprovider_.quitDriver(browser_.driver)\n                    .then(replaceBrowser)\n                    .then(newBrowser => newBrowser.ready);\n            }\n        };\n        browser_.restartSync = () => {\n            if (!browser_.controlFlowIsEnabled()) {\n                throw TypeError('Unable to use `browser.restartSync()` when the control flow is disabled');\n            }\n            this.driverprovider_.quitDriver(browser_.driver);\n            return replaceBrowser();\n        };\n        return browser_;\n    }\n    /**\n     * Final cleanup on exiting the runner.\n     *\n     * @return {q.Promise} A promise which resolves on finish.\n     * @private\n     */\n    shutdown_() {\n        return driverProviders_1.DriverProvider.quitDrivers(this.driverprovider_, this.driverprovider_.getExistingDrivers());\n    }\n    /**\n     * The primary workhorse interface. Kicks off the test running process.\n     *\n     * @return {q.Promise} A promise which resolves to the exit code of the tests.\n     * @public\n     */\n    run() {\n        let testPassed;\n        let plugins = this.plugins_ = new plugins_1.Plugins(this.config_);\n        let pluginPostTestPromises;\n        let browser_;\n        let results;\n        if (this.config_.framework !== 'explorer' && !this.config_.specs.length) {\n            throw new Error('Spec patterns did not match any files.');\n        }\n        if (this.config_.SELENIUM_PROMISE_MANAGER != null) {\n            selenium_webdriver_1.promise.USE_PROMISE_MANAGER = this.config_.SELENIUM_PROMISE_MANAGER;\n        }\n        if (this.config_.webDriverLogDir || this.config_.highlightDelay) {\n            this.config_.useBlockingProxy = true;\n        }\n        // 0) Wait for debugger\n        return q(this.ready_)\n            .then(() => {\n            // 1) Setup environment\n            // noinspection JSValidateTypes\n            return this.driverprovider_.setupEnv();\n        })\n            .then(() => {\n            // 2) Create a browser and setup globals\n            browser_ = this.createBrowser(plugins);\n            this.setupGlobals_(browser_);\n            return browser_.ready.then(browser_.getSession)\n                .then((session) => {\n                logger.debug('WebDriver session successfully started with capabilities ' +\n                    util.inspect(session.getCapabilities()));\n            }, (err) => {\n                logger.error('Unable to start a WebDriver session.');\n                throw err;\n            });\n            // 3) Setup plugins\n        })\n            .then(() => {\n            return plugins.setup();\n            // 4) Execute test cases\n        })\n            .then(() => {\n            // Do the framework setup here so that jasmine and mocha globals are\n            // available to the onPrepare function.\n            let frameworkPath = '';\n            if (this.config_.framework === 'jasmine' || this.config_.framework === 'jasmine2') {\n                frameworkPath = './frameworks/jasmine.js';\n            }\n            else if (this.config_.framework === 'mocha') {\n                frameworkPath = './frameworks/mocha.js';\n            }\n            else if (this.config_.framework === 'debugprint') {\n                // Private framework. Do not use.\n                frameworkPath = './frameworks/debugprint.js';\n            }\n            else if (this.config_.framework === 'explorer') {\n                // Private framework. Do not use.\n                frameworkPath = './frameworks/explorer.js';\n            }\n            else if (this.config_.framework === 'custom') {\n                if (!this.config_.frameworkPath) {\n                    throw new Error('When config.framework is custom, ' +\n                        'config.frameworkPath is required.');\n                }\n                frameworkPath = this.config_.frameworkPath;\n            }\n            else {\n                throw new Error('config.framework (' + this.config_.framework + ') is not a valid framework.');\n            }\n            if (this.config_.restartBrowserBetweenTests) {\n                // TODO(sjelin): replace with warnings once `afterEach` support is required\n                let restartDriver = () => {\n                    if (!this.frameworkUsesAfterEach) {\n                        this.restartPromise = q(browser_.restart());\n                    }\n                };\n                this.on('testPass', restartDriver);\n                this.on('testFail', restartDriver);\n            }\n            // We need to save these promises to make sure they're run, but we\n            // don't\n            // want to delay starting the next test (because we can't, it's just\n            // an event emitter).\n            pluginPostTestPromises = [];\n            this.on('testPass', (testInfo) => {\n                pluginPostTestPromises.push(plugins.postTest(true, testInfo));\n            });\n            this.on('testFail', (testInfo) => {\n                pluginPostTestPromises.push(plugins.postTest(false, testInfo));\n            });\n            logger.debug('Running with spec files ' + this.config_.specs);\n            return require(frameworkPath).run(this, this.config_.specs);\n            // 5) Wait for postTest plugins to finish\n        })\n            .then((testResults) => {\n            results = testResults;\n            return q.all(pluginPostTestPromises);\n            // 6) Teardown plugins\n        })\n            .then(() => {\n            return plugins.teardown();\n            // 7) Teardown\n        })\n            .then(() => {\n            results = helper.joinTestLogs(results, plugins.getResults());\n            this.emit('testsDone', results);\n            testPassed = results.failedCount === 0;\n            if (this.driverprovider_.updateJob) {\n                return this.driverprovider_.updateJob({ 'passed': testPassed }).then(() => {\n                    return this.driverprovider_.teardownEnv();\n                });\n            }\n            else {\n                return this.driverprovider_.teardownEnv();\n            }\n            // 8) Let plugins do final cleanup\n        })\n            .then(() => {\n            return plugins.postResults();\n            // 9) Exit process\n        })\n            .then(() => {\n            let exitCode = testPassed ? 0 : 1;\n            return this.exit_(exitCode);\n        })\n            .fin(() => {\n            return this.shutdown_();\n        });\n    }\n}\nexports.Runner = Runner;\n"]},"metadata":{},"sourceType":"script"}