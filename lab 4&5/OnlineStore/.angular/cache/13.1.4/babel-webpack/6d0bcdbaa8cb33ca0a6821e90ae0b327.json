{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst blocking_proxy_1 = require(\"blocking-proxy\");\n\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\n\nconst url = require(\"url\");\n\nconst webdriver_js_extender_1 = require(\"webdriver-js-extender\");\n\nconst element_1 = require(\"./element\");\n\nconst expectedConditions_1 = require(\"./expectedConditions\");\n\nconst locators_1 = require(\"./locators\");\n\nconst logger_1 = require(\"./logger\");\n\nconst clientSideScripts = require('./clientsidescripts'); // TODO: fix the typings for selenium-webdriver/lib/command\n\n\nconst Command = require('selenium-webdriver/lib/command').Command;\n\nconst CommandName = require('selenium-webdriver/lib/command').Name; // jshint browser: true\n\n\nconst DEFER_LABEL = 'NG_DEFER_BOOTSTRAP!';\nconst DEFAULT_RESET_URL = 'data:text/html,<html></html>';\nconst DEFAULT_GET_PAGE_TIMEOUT = 10000;\nlet logger = new logger_1.Logger('protractor'); // TODO(cnishina): either remove for loop entirely since this does not export anything\n// the user might need since everything is composed (with caveat that this could be a\n// potential breaking change) or export the types with `export * from 'selenium-webdriver'`;\n\n/*\n * Mix in other webdriver functionality to be accessible via protractor.\n */\n\nfor (let foo in require('selenium-webdriver')) {\n  exports[foo] = require('selenium-webdriver')[foo];\n} // Explicitly define types for webdriver.WebDriver and ExtendedWebDriver.\n// We do this because we use composition over inheritance to implement polymorphism, and therefore\n// we don't want to inherit WebDriver's constructor.\n\n\nclass AbstractWebDriver {}\n\nexports.AbstractWebDriver = AbstractWebDriver;\n\nclass AbstractExtendedWebDriver extends AbstractWebDriver {}\n\nexports.AbstractExtendedWebDriver = AbstractExtendedWebDriver;\n/**\n * Mix a function from one object onto another. The function will still be\n * called in the context of the original object.  Any arguments of type\n * `ElementFinder` will be unwrapped to their underlying `WebElement` instance\n *\n * @private\n * @param {Object} to\n * @param {Object} from\n * @param {string} fnName\n * @param {function=} setupFn\n */\n\nfunction ptorMixin(to, from, fnName, setupFn) {\n  to[fnName] = function () {\n    const args = arguments;\n\n    for (let i = 0; i < args.length; i++) {\n      if (args[i] instanceof element_1.ElementFinder) {\n        args[i] = args[i].getWebElement();\n      }\n    }\n\n    const run = () => {\n      return from[fnName].apply(from, args);\n    };\n\n    if (setupFn) {\n      const setupResult = setupFn();\n\n      if (setupResult && typeof setupResult.then === 'function') {\n        return setupResult.then(run);\n      }\n    }\n\n    return run();\n  };\n}\n\n;\n/**\n * Build the helper 'element' function for a given instance of Browser.\n *\n * @private\n * @param {Browser} browser A browser instance.\n * @returns {function(webdriver.Locator): ElementFinder}\n */\n\nfunction buildElementHelper(browser) {\n  let element = locator => {\n    return new element_1.ElementArrayFinder(browser).all(locator).toElementFinder_();\n  };\n\n  element.all = locator => {\n    return new element_1.ElementArrayFinder(browser).all(locator);\n  };\n\n  return element;\n}\n\n;\n/**\n * @alias browser\n * @constructor\n * @extends {webdriver_extensions.ExtendedWebDriver}\n * @param {webdriver.WebDriver} webdriver\n * @param {string=} opt_baseUrl A base URL to run get requests against.\n * @param {string|webdriver.promise.Promise<string>=} opt_rootElement  Selector element that has an\n *     ng-app in scope.\n * @param {boolean=} opt_untrackOutstandingTimeouts Whether Protractor should\n *     stop tracking outstanding $timeouts.\n */\n\nclass ProtractorBrowser extends AbstractExtendedWebDriver {\n  constructor(webdriverInstance, opt_baseUrl, opt_rootElement, opt_untrackOutstandingTimeouts, opt_blockingProxyUrl) {\n    super(); // These functions should delegate to the webdriver instance, but should\n    // wait for Angular to sync up before performing the action. This does not\n    // include functions which are overridden by protractor below.\n\n    let methodsToSync = ['getCurrentUrl', 'getPageSource', 'getTitle'];\n    let extendWDInstance;\n\n    try {\n      extendWDInstance = webdriver_js_extender_1.extend(webdriverInstance);\n    } catch (e) {\n      // Probably not a driver that can be extended (e.g. gotten using\n      // `directConnect: true` in the config)\n      extendWDInstance = webdriverInstance;\n    } // Mix all other driver functionality into Protractor.\n\n\n    Object.getOwnPropertyNames(selenium_webdriver_1.WebDriver.prototype).forEach(method => {\n      if (!this[method] && typeof extendWDInstance[method] === 'function') {\n        if (methodsToSync.indexOf(method) !== -1) {\n          ptorMixin(this, extendWDInstance, method, this.waitForAngular.bind(this));\n        } else {\n          ptorMixin(this, extendWDInstance, method);\n        }\n      }\n    });\n    this.driver = extendWDInstance;\n\n    if (opt_blockingProxyUrl) {\n      logger.info('Starting BP client for ' + opt_blockingProxyUrl);\n      this.bpClient = new blocking_proxy_1.BPClient(opt_blockingProxyUrl);\n    }\n\n    this.element = buildElementHelper(this);\n    this.$ = element_1.build$(this.element, selenium_webdriver_1.By);\n    this.$$ = element_1.build$$(this.element, selenium_webdriver_1.By);\n    this.baseUrl = opt_baseUrl || '';\n    this.getPageTimeout = DEFAULT_GET_PAGE_TIMEOUT;\n    this.params = {};\n    this.resetUrl = DEFAULT_RESET_URL;\n    let ng12Hybrid_ = false;\n    Object.defineProperty(this, 'ng12Hybrid', {\n      get: function () {\n        return ng12Hybrid_;\n      },\n      set: function (ng12Hybrid) {\n        if (ng12Hybrid) {\n          logger.warn('You have set ng12Hybrid.  As of Protractor 4.1.0, ' + 'Protractor can automatically infer if you are using an ' + 'ngUpgrade app (as long as ng1 is loaded before you call ' + 'platformBrowserDynamic()), and this flag is no longer needed ' + 'for most users');\n        }\n\n        ng12Hybrid_ = ng12Hybrid;\n      }\n    });\n    this.ready = this.angularAppRoot(opt_rootElement || '').then(() => {\n      return this.driver.getSession();\n    }).then(session => {\n      // Internet Explorer does not accept data URLs, which are the default\n      // reset URL for Protractor.\n      // Safari accepts data urls, but SafariDriver fails after one is used.\n      // PhantomJS produces a \"Detected a page unload event\" if we use data urls\n      let browserName = session.getCapabilities().get('browserName');\n\n      if (browserName === 'internet explorer' || browserName === 'safari' || browserName === 'phantomjs' || browserName === 'MicrosoftEdge') {\n        this.resetUrl = 'about:blank';\n      }\n\n      return this;\n    });\n    this.trackOutstandingTimeouts_ = !opt_untrackOutstandingTimeouts;\n    this.mockModules_ = [];\n    this.addBaseMockModules_(); // set up expected conditions\n\n    this.ExpectedConditions = new expectedConditions_1.ProtractorExpectedConditions(this);\n  }\n  /**\n   * The css selector for an element on which to find Angular. This is usually\n   * 'body' but if your ng-app is on a subsection of the page it may be\n   * a subelement.\n   *\n   * This property is deprecated - please use angularAppRoot() instead.\n   *\n   * @deprecated\n   * @type {string}\n   */\n\n\n  set rootEl(value) {\n    this.angularAppRoot(value);\n  }\n\n  get rootEl() {\n    return this.internalRootEl;\n  }\n  /**\n   * Set the css selector for an element on which to find Angular. This is usually\n   * 'body' but if your ng-app is on a subsection of the page it may be\n   * a subelement.\n   *\n   * The change will be made within WebDriver's control flow, so that commands after\n   * this method is called use the new app root. Pass nothing to get a promise that\n   * resolves to the value of the selector.\n   *\n   * @param {string|webdriver.promise.Promise<string>} value The new selector.\n   * @returns A promise that resolves with the value of the selector.\n   */\n\n\n  angularAppRoot(value = null) {\n    return this.driver.controlFlow().execute(() => {\n      if (value != null) {\n        return selenium_webdriver_1.promise.when(value).then(value => {\n          this.internalRootEl = value;\n\n          if (this.bpClient) {\n            const bpCommandPromise = this.bpClient.setWaitParams(value); // Convert to webdriver promise as best as possible\n\n            return selenium_webdriver_1.promise.when(bpCommandPromise).then(() => this.internalRootEl);\n          }\n\n          return this.internalRootEl;\n        });\n      }\n\n      return selenium_webdriver_1.promise.when(this.internalRootEl);\n    }, `Set angular root selector to ${value}`);\n  }\n  /**\n   * If true, Protractor will not attempt to synchronize with the page before\n   * performing actions. This can be harmful because Protractor will not wait\n   * until $timeouts and $http calls have been processed, which can cause\n   * tests to become flaky. This should be used only when necessary, such as\n   * when a page continuously polls an API using $timeout.\n   *\n   * Initialized to `false` by the runner.\n   *\n   * This property is deprecated - please use waitForAngularEnabled instead.\n   *\n   * @deprecated\n   * @type {boolean}\n   */\n\n\n  set ignoreSynchronization(value) {\n    this.waitForAngularEnabled(!value);\n  }\n\n  get ignoreSynchronization() {\n    return this.internalIgnoreSynchronization;\n  }\n  /**\n   * If set to false, Protractor will not wait for Angular $http and $timeout\n   * tasks to complete before interacting with the browser. This can cause\n   * flaky tests, but should be used if, for instance, your app continuously\n   * polls an API with $timeout.\n   *\n   * Call waitForAngularEnabled() without passing a value to read the current\n   * state without changing it.\n   */\n\n\n  waitForAngularEnabled(enabled = null) {\n    if (enabled != null) {\n      const ret = this.driver.controlFlow().execute(() => {\n        return selenium_webdriver_1.promise.when(enabled).then(enabled => {\n          if (this.bpClient) {\n            logger.debug('Setting waitForAngular' + !enabled);\n            const bpCommandPromise = this.bpClient.setWaitEnabled(enabled); // Convert to webdriver promise as best as possible\n\n            return selenium_webdriver_1.promise.when(bpCommandPromise).then(() => enabled);\n          }\n        });\n      }, `Set proxy synchronization enabled to ${enabled}`);\n      this.internalIgnoreSynchronization = !enabled;\n      return ret;\n    }\n\n    return selenium_webdriver_1.promise.when(!this.ignoreSynchronization);\n  }\n  /**\n   * Get the processed configuration object that is currently being run. This\n   * will contain the specs and capabilities properties of the current runner\n   * instance.\n   *\n   * Set by the runner.\n   *\n   * @returns {webdriver.promise.Promise} A promise which resolves to the\n   * capabilities object.\n   */\n\n\n  getProcessedConfig() {\n    return null;\n  }\n  /**\n   * Fork another instance of browser for use in interactive tests.\n   *\n   * @example\n   * // Running with control flow enabled\n   * var fork = browser.forkNewDriverInstance();\n   * fork.get('page1'); // 'page1' gotten by forked browser\n   *\n   * // Running with control flow disabled\n   * var forked = await browser.forkNewDriverInstance().ready;\n   * await forked.get('page1'); // 'page1' gotten by forked browser\n   *\n   * @param {boolean=} useSameUrl Whether to navigate to current url on creation\n   * @param {boolean=} copyMockModules Whether to apply same mock modules on creation\n   * @param {boolean=} copyConfigUpdates Whether to copy over changes to `baseUrl` and similar\n   *   properties initialized to values in the the config.  Defaults to `true`\n   *\n   * @returns {ProtractorBrowser} A browser instance.\n   */\n\n\n  forkNewDriverInstance(useSameUrl, copyMockModules, copyConfigUpdates = true) {\n    return null;\n  }\n  /**\n   * Restart the browser.  This is done by closing this browser instance and creating a new one.\n   * A promise resolving to the new instance is returned, and if this function was called on the\n   * global `browser` instance then Protractor will automatically overwrite the global `browser`\n   * variable.\n   *\n   * When restarting a forked browser, it is the caller's job to overwrite references to the old\n   * instance.\n   *\n   * This function behaves slightly differently depending on if the webdriver control flow is\n   * enabled.  If the control flow is enabled, the global `browser` object is synchronously\n   * replaced. If the control flow is disabled, the global `browser` is replaced asynchronously\n   * after the old driver quits.\n   *\n   * Set by the runner.\n   *\n   * @example\n   * // Running against global browser, with control flow enabled\n   * browser.get('page1');\n   * browser.restart();\n   * browser.get('page2'); // 'page2' gotten by restarted browser\n   *\n   * // Running against global browser, with control flow disabled\n   * await browser.get('page1');\n   * await browser.restart();\n   * await browser.get('page2'); // 'page2' gotten by restarted browser\n   *\n   * // Running against forked browsers, with the control flow enabled\n   * // In this case, you may prefer `restartSync` (documented below)\n   * var forked = browser.forkNewDriverInstance();\n   * fork.get('page1');\n   * fork.restart().then(function(fork) {\n   *   fork.get('page2'); // 'page2' gotten by restarted fork\n   * });\n   *\n   * // Running against forked browsers, with the control flow disabled\n   * var forked = await browser.forkNewDriverInstance().ready;\n   * await fork.get('page1');\n   * fork = await fork.restart();\n   * await fork.get('page2'); // 'page2' gotten by restarted fork\n   *\n   * // Unexpected behavior can occur if you save references to the global `browser`\n   * var savedBrowser = browser;\n   * browser.get('foo').then(function() {\n   *   console.log(browser === savedBrowser); // false\n   * });\n   * browser.restart();\n   *\n   * @returns {webdriver.promise.Promise<ProtractorBrowser>} A promise resolving to the restarted\n   *   browser\n   */\n\n\n  restart() {\n    return;\n  }\n  /**\n   * Like `restart`, but instead of returning a promise resolving to the new browser instance,\n   * returns the new browser instance directly.  Can only be used when the control flow is enabled.\n   *\n   * @example\n   * // Running against global browser\n   * browser.get('page1');\n   * browser.restartSync();\n   * browser.get('page2'); // 'page2' gotten by restarted browser\n   *\n   * // Running against forked browsers\n   * var forked = browser.forkNewDriverInstance();\n   * fork.get('page1');\n   * fork = fork.restartSync();\n   * fork.get('page2'); // 'page2' gotten by restarted fork\n   *\n   * @throws {TypeError} Will throw an error if the control flow is not enabled\n   * @returns {ProtractorBrowser} The restarted browser\n   */\n\n\n  restartSync() {\n    return;\n  }\n  /**\n   * Instead of using a single root element, search through all angular apps\n   * available on the page when finding elements or waiting for stability.\n   * Only compatible with Angular2.\n   */\n\n\n  useAllAngular2AppRoots() {\n    // The empty string is an invalid css selector, so we use it to easily\n    // signal to scripts to not find a root element.\n    this.angularAppRoot('');\n  }\n  /**\n   * The same as {@code webdriver.WebDriver.prototype.executeScript},\n   * but with a customized description for debugging.\n   *\n   * @private\n   * @param {!(string|Function)} script The script to execute.\n   * @param {string} description A description of the command for debugging.\n   * @param {...*} var_args The arguments to pass to the script.\n   * @returns {!webdriver.promise.Promise.<T>} A promise that will resolve to\n   * the scripts return value.\n   * @template T\n   */\n\n\n  executeScriptWithDescription(script, description, ...scriptArgs) {\n    if (typeof script === 'function') {\n      script = 'return (' + script + ').apply(null, arguments);';\n    }\n\n    return this.driver.schedule(new Command(CommandName.EXECUTE_SCRIPT).setParameter('script', script).setParameter('args', scriptArgs), description);\n  }\n  /**\n   * The same as {@code webdriver.WebDriver.prototype.executeAsyncScript},\n   * but with a customized description for debugging.\n   *\n   * @private\n   * @param {!(string|Function)} script The script to execute.\n   * @param {string} description A description for debugging purposes.\n   * @param {...*} var_args The arguments to pass to the script.\n   * @returns {!webdriver.promise.Promise.<T>} A promise that will resolve to\n   * the\n   *    scripts return value.\n   * @template T\n   */\n\n\n  executeAsyncScript_(script, description, ...scriptArgs) {\n    if (typeof script === 'function') {\n      script = 'return (' + script + ').apply(null, arguments);';\n    }\n\n    return this.driver.schedule(new Command(CommandName.EXECUTE_ASYNC_SCRIPT).setParameter('script', script).setParameter('args', scriptArgs), description);\n  }\n  /**\n   * Instruct webdriver to wait until Angular has finished rendering and has\n   * no outstanding $http or $timeout calls before continuing.\n   * Note that Protractor automatically applies this command before every\n   * WebDriver action.\n   *\n   * @param {string=} opt_description An optional description to be added\n   *     to webdriver logs.\n   * @returns {!webdriver.promise.Promise} A promise that will resolve to the\n   *    scripts return value.\n   */\n\n\n  waitForAngular(opt_description) {\n    let description = opt_description ? ' - ' + opt_description : '';\n\n    if (this.ignoreSynchronization) {\n      return this.driver.controlFlow().execute(() => {\n        return true;\n      }, 'Ignore Synchronization Protractor.waitForAngular()');\n    }\n\n    let runWaitForAngularScript = () => {\n      if (this.plugins_.skipAngularStability() || this.bpClient) {\n        return this.driver.controlFlow().execute(() => {\n          return selenium_webdriver_1.promise.when(null);\n        }, 'bpClient or plugin stability override');\n      } else {\n        // Need to wrap this so that we read rootEl in the control flow, not synchronously.\n        return this.angularAppRoot().then(rootEl => {\n          return this.executeAsyncScript_(clientSideScripts.waitForAngular, 'Protractor.waitForAngular()' + description, rootEl);\n        });\n      }\n    };\n\n    return runWaitForAngularScript().then(browserErr => {\n      if (browserErr) {\n        throw new Error('Error while waiting for Protractor to ' + 'sync with the page: ' + JSON.stringify(browserErr));\n      }\n    }).then(() => {\n      return this.driver.controlFlow().execute(() => {\n        return this.plugins_.waitForPromise(this);\n      }, 'Plugins.waitForPromise()').then(() => {\n        return this.driver.wait(() => {\n          return this.plugins_.waitForCondition(this).then(results => {\n            return results.reduce((x, y) => x && y, true);\n          });\n        }, this.allScriptsTimeout, 'Plugins.waitForCondition()');\n      });\n    }, err => {\n      let timeout;\n\n      if (/asynchronous script timeout/.test(err.message)) {\n        // Timeout on Chrome\n        timeout = /-?[\\d\\.]*\\ seconds/.exec(err.message);\n      } else if (/Timed out waiting for async script/.test(err.message)) {\n        // Timeout on Firefox\n        timeout = /-?[\\d\\.]*ms/.exec(err.message);\n      } else if (/Timed out waiting for an asynchronous script/.test(err.message)) {\n        // Timeout on Safari\n        timeout = /-?[\\d\\.]*\\ ms/.exec(err.message);\n      }\n\n      if (timeout) {\n        let errMsg = `Timed out waiting for asynchronous Angular tasks to finish after ` + `${timeout}. This may be because the current page is not an Angular ` + `application. Please see the FAQ for more details: ` + `https://github.com/angular/protractor/blob/master/docs/timeouts.md#waiting-for-angular`;\n\n        if (description.indexOf(' - Locator: ') == 0) {\n          errMsg += '\\nWhile waiting for element with locator' + description;\n        }\n\n        let pendingTimeoutsPromise;\n\n        if (this.trackOutstandingTimeouts_) {\n          pendingTimeoutsPromise = this.executeScriptWithDescription('return window.NG_PENDING_TIMEOUTS', 'Protractor.waitForAngular() - getting pending timeouts' + description);\n        } else {\n          pendingTimeoutsPromise = selenium_webdriver_1.promise.when({});\n        }\n\n        let pendingHttpsPromise = this.executeScriptWithDescription(clientSideScripts.getPendingHttpRequests, 'Protractor.waitForAngular() - getting pending https' + description, this.internalRootEl);\n        return selenium_webdriver_1.promise.all([pendingTimeoutsPromise, pendingHttpsPromise]).then(arr => {\n          let pendingTimeouts = arr[0] || [];\n          let pendingHttps = arr[1] || [];\n          let key,\n              pendingTasks = [];\n\n          for (key in pendingTimeouts) {\n            if (pendingTimeouts.hasOwnProperty(key)) {\n              pendingTasks.push(' - $timeout: ' + pendingTimeouts[key]);\n            }\n          }\n\n          for (key in pendingHttps) {\n            pendingTasks.push(' - $http: ' + pendingHttps[key].url);\n          }\n\n          if (pendingTasks.length) {\n            errMsg += '. \\nThe following tasks were pending:\\n';\n            errMsg += pendingTasks.join('\\n');\n          }\n\n          err.message = errMsg;\n          throw err;\n        }, () => {\n          err.message = errMsg;\n          throw err;\n        });\n      } else {\n        throw err;\n      }\n    });\n  }\n  /**\n   * Waits for Angular to finish rendering before searching for elements.\n   * @see webdriver.WebDriver.findElement\n   * @returns {!webdriver.WebElementPromise} A promise that will be resolved to\n   *      the located {@link webdriver.WebElement}.\n   */\n\n\n  findElement(locator) {\n    return this.element(locator).getWebElement();\n  }\n  /**\n   * Waits for Angular to finish rendering before searching for elements.\n   * @see webdriver.WebDriver.findElements\n   * @returns {!webdriver.promise.Promise} A promise that will be resolved to an\n   *     array of the located {@link webdriver.WebElement}s.\n   */\n\n\n  findElements(locator) {\n    return this.element.all(locator).getWebElements();\n  }\n  /**\n   * Tests if an element is present on the page.\n   * @see webdriver.WebDriver.isElementPresent\n   * @returns {!webdriver.promise.Promise} A promise that will resolve to whether\n   *     the element is present on the page.\n   */\n\n\n  isElementPresent(locatorOrElement) {\n    let element;\n\n    if (locatorOrElement instanceof element_1.ElementFinder) {\n      element = locatorOrElement;\n    } else if (locatorOrElement instanceof selenium_webdriver_1.WebElement) {\n      element = element_1.ElementFinder.fromWebElement_(this, locatorOrElement);\n    } else {\n      element = this.element(locatorOrElement);\n    }\n\n    return element.isPresent();\n  }\n  /**\n   * Add a module to load before Angular whenever Protractor.get is called.\n   * Modules will be registered after existing modules already on the page,\n   * so any module registered here will override preexisting modules with the\n   * same name.\n   *\n   * @example\n   * browser.addMockModule('modName', function() {\n   *   angular.module('modName', []).value('foo', 'bar');\n   * });\n   *\n   * @param {!string} name The name of the module to load or override.\n   * @param {!string|Function} script The JavaScript to load the module.\n   *     Note that this will be executed in the browser context, so it cannot\n   *     access variables from outside its scope.\n   * @param {...*} varArgs Any additional arguments will be provided to\n   *     the script and may be referenced using the `arguments` object.\n   */\n\n\n  addMockModule(name, script, ...moduleArgs) {\n    this.mockModules_.push({\n      name: name,\n      script: script,\n      args: moduleArgs\n    });\n  }\n  /**\n   * Clear the list of registered mock modules.\n   */\n\n\n  clearMockModules() {\n    this.mockModules_ = [];\n    this.addBaseMockModules_();\n  }\n  /**\n   * Remove a registered mock module.\n   *\n   * @example\n   * browser.removeMockModule('modName');\n   *\n   * @param {!string} name The name of the module to remove.\n   */\n\n\n  removeMockModule(name) {\n    for (let i = 0; i < this.mockModules_.length; ++i) {\n      if (this.mockModules_[i].name == name) {\n        this.mockModules_.splice(i--, 1);\n      }\n    }\n  }\n  /**\n   * Get a list of the current mock modules.\n   *\n   * @returns {Array.<!string|Function>} The list of mock modules.\n   */\n\n\n  getRegisteredMockModules() {\n    return this.mockModules_.map(module => module.script);\n  }\n\n  /**\n   * Add the base mock modules used for all Protractor tests.\n   *\n   * @private\n   */\n  addBaseMockModules_() {\n    this.addMockModule('protractorBaseModule_', clientSideScripts.protractorBaseModuleFn, this.trackOutstandingTimeouts_);\n  }\n  /**\n   * @see webdriver.WebDriver.get\n   *\n   * Navigate to the given destination and loads mock modules before\n   * Angular. Assumes that the page being loaded uses Angular.\n   * If you need to access a page which does not have Angular on load, use\n   * the wrapped webdriver directly.\n   *\n   * @example\n   * browser.get('https://angularjs.org/');\n   * expect(browser.getCurrentUrl()).toBe('https://angularjs.org/');\n   *\n   * @param {string} destination Destination URL.\n   * @param {number=} opt_timeout Number of milliseconds to wait for Angular to\n   *     start.\n   */\n\n\n  get(destination, timeout = this.getPageTimeout) {\n    destination = this.baseUrl.indexOf('file://') === 0 ? this.baseUrl + destination : url.resolve(this.baseUrl, destination);\n\n    if (this.ignoreSynchronization) {\n      return this.driver.get(destination).then(() => this.driver.controlFlow().execute(() => this.plugins_.onPageLoad(this))).then(() => null);\n    }\n\n    let msg = str => {\n      return 'Protractor.get(' + destination + ') - ' + str;\n    };\n\n    return this.driver.controlFlow().execute(() => {\n      return selenium_webdriver_1.promise.when(null);\n    }).then(() => {\n      if (this.bpClient) {\n        return this.driver.controlFlow().execute(() => {\n          return this.bpClient.setWaitEnabled(false);\n        });\n      }\n    }).then(() => {\n      // Go to reset url\n      return this.driver.get(this.resetUrl);\n    }).then(() => {\n      // Set defer label and navigate\n      return this.executeScriptWithDescription('window.name = \"' + DEFER_LABEL + '\" + window.name;' + 'window.location.replace(\"' + destination + '\");', msg('reset url'));\n    }).then(() => {\n      // We need to make sure the new url has loaded before\n      // we try to execute any asynchronous scripts.\n      return this.driver.wait(() => {\n        return this.executeScriptWithDescription('return window.location.href;', msg('get url')).then(url => {\n          return url !== this.resetUrl;\n        }, err => {\n          if (err.code == 13 || err.name === 'JavascriptError') {\n            // Ignore the error, and continue trying. This is\n            // because IE driver sometimes (~1%) will throw an\n            // unknown error from this execution. See\n            // https://github.com/angular/protractor/issues/841\n            // This shouldn't mask errors because it will fail\n            // with the timeout anyway.\n            return false;\n          } else {\n            throw err;\n          }\n        });\n      }, timeout, 'waiting for page to load for ' + timeout + 'ms');\n    }).then(() => {\n      // Run Plugins\n      return this.driver.controlFlow().execute(() => {\n        return this.plugins_.onPageLoad(this);\n      });\n    }).then(() => {\n      // Make sure the page is an Angular page.\n      return this.executeAsyncScript_(clientSideScripts.testForAngular, msg('test for angular'), Math.floor(timeout / 1000), this.ng12Hybrid).then(angularTestResult => {\n        let angularVersion = angularTestResult.ver;\n\n        if (!angularVersion) {\n          let message = angularTestResult.message;\n          logger.error(`Could not find Angular on page ${destination} : ${message}`);\n          throw new Error(`Angular could not be found on the page ${destination}. ` + `If this is not an Angular application, you may need to turn off waiting for Angular.\n                          Please see \n                          https://github.com/angular/protractor/blob/master/docs/timeouts.md#waiting-for-angular-on-page-load`);\n        }\n\n        return angularVersion;\n      }, err => {\n        throw new Error('Error while running testForAngular: ' + err.message);\n      });\n    }).then(angularVersion => {\n      // Load Angular Mocks\n      if (angularVersion === 1) {\n        // At this point, Angular will pause for us until angular.resumeBootstrap is called.\n        let moduleNames = [];\n        let modulePromise = selenium_webdriver_1.promise.when(null);\n\n        for (const {\n          name,\n          script,\n          args\n        } of this.mockModules_) {\n          moduleNames.push(name);\n          let executeScriptArgs = [script, msg('add mock module ' + name), ...args];\n          modulePromise = modulePromise.then(() => this.executeScriptWithDescription.apply(this, executeScriptArgs).then(null, err => {\n            throw new Error('Error while running module script ' + name + ': ' + err.message);\n          }));\n        }\n\n        return modulePromise.then(() => this.executeScriptWithDescription('window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__ = ' + 'angular.resumeBootstrap(arguments[0]);', msg('resume bootstrap'), moduleNames));\n      } else {\n        // TODO: support mock modules in Angular2. For now, error if someone\n        // has tried to use one.\n        if (this.mockModules_.length > 1) {\n          throw 'Trying to load mock modules on an Angular v2+ app is not yet supported.';\n        }\n      }\n    }).then(() => {\n      // Reset bpClient sync\n      if (this.bpClient) {\n        return this.driver.controlFlow().execute(() => {\n          return this.bpClient.setWaitEnabled(!this.internalIgnoreSynchronization);\n        });\n      }\n    }).then(() => {\n      // Run Plugins\n      return this.driver.controlFlow().execute(() => {\n        return this.plugins_.onPageStable(this);\n      });\n    }).then(() => null);\n  }\n  /**\n   * @see webdriver.WebDriver.refresh\n   *\n   * Makes a full reload of the current page and loads mock modules before\n   * Angular. Assumes that the page being loaded uses Angular.\n   * If you need to access a page which does not have Angular on load, use\n   * the wrapped webdriver directly.\n   *\n   * @param {number=} opt_timeout Number of milliseconds to wait for Angular to start.\n   */\n\n\n  refresh(opt_timeout) {\n    if (this.ignoreSynchronization) {\n      return this.driver.navigate().refresh();\n    }\n\n    return this.executeScriptWithDescription('return window.location.href', 'Protractor.refresh() - getUrl').then(href => {\n      return this.get(href, opt_timeout);\n    });\n  }\n  /**\n   * Mixin navigation methods back into the navigation object so that\n   * they are invoked as before, i.e. driver.navigate().refresh()\n   */\n\n\n  navigate() {\n    let nav = this.driver.navigate();\n    ptorMixin(nav, this, 'refresh');\n    return nav;\n  }\n  /**\n   * Browse to another page using in-page navigation.\n   *\n   * @example\n   * browser.get('http://angular.github.io/protractor/#/tutorial');\n   * browser.setLocation('api');\n   * expect(browser.getCurrentUrl())\n   *     .toBe('http://angular.github.io/protractor/#/api');\n   *\n   * @param {string} url In page URL using the same syntax as $location.url()\n   * @returns {!webdriver.promise.Promise} A promise that will resolve once\n   *    page has been changed.\n   */\n\n\n  setLocation(url) {\n    return this.waitForAngular().then(() => this.angularAppRoot()).then(rootEl => this.executeScriptWithDescription(clientSideScripts.setLocation, 'Protractor.setLocation()', rootEl, url).then(browserErr => {\n      if (browserErr) {\n        throw 'Error while navigating to \\'' + url + '\\' : ' + JSON.stringify(browserErr);\n      }\n    }));\n  }\n  /**\n   * Deprecated, use `browser.getCurrentUrl()` instead.\n   *\n   * Despite its name, this function will generally return `$location.url()`, though in some\n   * cases it will return `$location.absUrl()` instead.  This function is only here for legacy\n   * users, and will probably be removed in Protractor 6.0.\n   *\n   * @deprecated Please use `browser.getCurrentUrl()`\n   * @example\n   * browser.get('http://angular.github.io/protractor/#/api');\n   * expect(browser.getLocationAbsUrl())\n   *     .toBe('http://angular.github.io/protractor/#/api');\n   * @returns {webdriver.promise.Promise<string>} The current absolute url from\n   * AngularJS.\n   */\n\n\n  getLocationAbsUrl() {\n    logger.warn('`browser.getLocationAbsUrl()` is deprecated, please use `browser.getCurrentUrl` instead.');\n    return this.waitForAngular().then(() => this.angularAppRoot()).then(rootEl => this.executeScriptWithDescription(clientSideScripts.getLocationAbsUrl, 'Protractor.getLocationAbsUrl()', rootEl));\n  }\n  /**\n   * Determine if the control flow is enabled.\n   *\n   * @returns true if the control flow is enabled, false otherwise.\n   */\n\n\n  controlFlowIsEnabled() {\n    if (selenium_webdriver_1.promise.USE_PROMISE_MANAGER !== undefined) {\n      return selenium_webdriver_1.promise.USE_PROMISE_MANAGER;\n    } else {\n      // True for old versions of `selenium-webdriver`, probably false in >=5.0.0\n      return !!selenium_webdriver_1.promise.ControlFlow;\n    }\n  }\n\n}\n/**\n * @type {ProtractorBy}\n */\n\n\nProtractorBrowser.By = new locators_1.ProtractorBy();\nexports.ProtractorBrowser = ProtractorBrowser;","map":{"version":3,"sources":["/Users/dariya/Documents/GitHub/Web-development/lab 4&5/wgg87w--run/node_modules/protractor/built/browser.js"],"names":["Object","defineProperty","exports","value","blocking_proxy_1","require","selenium_webdriver_1","url","webdriver_js_extender_1","element_1","expectedConditions_1","locators_1","logger_1","clientSideScripts","Command","CommandName","Name","DEFER_LABEL","DEFAULT_RESET_URL","DEFAULT_GET_PAGE_TIMEOUT","logger","Logger","foo","AbstractWebDriver","AbstractExtendedWebDriver","ptorMixin","to","from","fnName","setupFn","args","arguments","i","length","ElementFinder","getWebElement","run","apply","setupResult","then","buildElementHelper","browser","element","locator","ElementArrayFinder","all","toElementFinder_","ProtractorBrowser","constructor","webdriverInstance","opt_baseUrl","opt_rootElement","opt_untrackOutstandingTimeouts","opt_blockingProxyUrl","methodsToSync","extendWDInstance","extend","e","getOwnPropertyNames","WebDriver","prototype","forEach","method","indexOf","waitForAngular","bind","driver","info","bpClient","BPClient","$","build$","By","$$","build$$","baseUrl","getPageTimeout","params","resetUrl","ng12Hybrid_","get","set","ng12Hybrid","warn","ready","angularAppRoot","getSession","session","browserName","getCapabilities","trackOutstandingTimeouts_","mockModules_","addBaseMockModules_","ExpectedConditions","ProtractorExpectedConditions","rootEl","internalRootEl","controlFlow","execute","promise","when","bpCommandPromise","setWaitParams","ignoreSynchronization","waitForAngularEnabled","internalIgnoreSynchronization","enabled","ret","debug","setWaitEnabled","getProcessedConfig","forkNewDriverInstance","useSameUrl","copyMockModules","copyConfigUpdates","restart","restartSync","useAllAngular2AppRoots","executeScriptWithDescription","script","description","scriptArgs","schedule","EXECUTE_SCRIPT","setParameter","executeAsyncScript_","EXECUTE_ASYNC_SCRIPT","opt_description","runWaitForAngularScript","plugins_","skipAngularStability","browserErr","Error","JSON","stringify","waitForPromise","wait","waitForCondition","results","reduce","x","y","allScriptsTimeout","err","timeout","test","message","exec","errMsg","pendingTimeoutsPromise","pendingHttpsPromise","getPendingHttpRequests","arr","pendingTimeouts","pendingHttps","key","pendingTasks","hasOwnProperty","push","join","findElement","findElements","getWebElements","isElementPresent","locatorOrElement","WebElement","fromWebElement_","isPresent","addMockModule","name","moduleArgs","clearMockModules","removeMockModule","splice","getRegisteredMockModules","map","module","protractorBaseModuleFn","destination","resolve","onPageLoad","msg","str","code","testForAngular","Math","floor","angularTestResult","angularVersion","ver","error","moduleNames","modulePromise","executeScriptArgs","onPageStable","refresh","opt_timeout","navigate","href","nav","setLocation","getLocationAbsUrl","controlFlowIsEnabled","USE_PROMISE_MANAGER","undefined","ControlFlow","ProtractorBy"],"mappings":"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Aa;AAChE,cAAI,KAAKtC,QAAT,EAAmB;AACfhD,YAAAA,MAAM,CAACwF,KAAP,CAAa,2BAA2B,CAACF,OAAzC;AACA,kBAAML,gBAAgB,GAAG,KAAKjC,QAAL,CAAcyC,cAAd,CAA6BH,OAA7B,CAAzB,CAFe,CAGf;;AACA,mBAAOpG,oBAAoB,CAAC6F,OAArB,CAA6BC,IAA7B,CAAkCC,gBAAlC,EAAoD9D,IAApD,CAAyD,MAAMmE,OAA/D,CAAP;AACH;AACJ,SAPM,CAAP;AAQH,OATW,EASR,wCAAuCA,OAAQ,EATvC,CAAZ;AAUA,WAAKD,6BAAL,GAAqC,CAACC,OAAtC;AACA,aAAOC,GAAP;AACH;;AACD,WAAOrG,oBAAoB,CAAC6F,OAArB,CAA6BC,IAA7B,CAAkC,CAAC,KAAKG,qBAAxC,CAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIO,EAAAA,kBAAkB,GAAG;AACjB,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,qBAAqB,CAACC,UAAD,EAAaC,eAAb,EAA8BC,iBAAiB,GAAG,IAAlD,EAAwD;AACzE,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,OAAO,GAAG;AACN;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACIC,EAAAA,WAAW,GAAG;AACV;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACIC,EAAAA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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst blocking_proxy_1 = require(\"blocking-proxy\");\nconst selenium_webdriver_1 = require(\"selenium-webdriver\");\nconst url = require(\"url\");\nconst webdriver_js_extender_1 = require(\"webdriver-js-extender\");\nconst element_1 = require(\"./element\");\nconst expectedConditions_1 = require(\"./expectedConditions\");\nconst locators_1 = require(\"./locators\");\nconst logger_1 = require(\"./logger\");\nconst clientSideScripts = require('./clientsidescripts');\n// TODO: fix the typings for selenium-webdriver/lib/command\nconst Command = require('selenium-webdriver/lib/command').Command;\nconst CommandName = require('selenium-webdriver/lib/command').Name;\n// jshint browser: true\nconst DEFER_LABEL = 'NG_DEFER_BOOTSTRAP!';\nconst DEFAULT_RESET_URL = 'data:text/html,<html></html>';\nconst DEFAULT_GET_PAGE_TIMEOUT = 10000;\nlet logger = new logger_1.Logger('protractor');\n// TODO(cnishina): either remove for loop entirely since this does not export anything\n// the user might need since everything is composed (with caveat that this could be a\n// potential breaking change) or export the types with `export * from 'selenium-webdriver'`;\n/*\n * Mix in other webdriver functionality to be accessible via protractor.\n */\nfor (let foo in require('selenium-webdriver')) {\n    exports[foo] = require('selenium-webdriver')[foo];\n}\n// Explicitly define types for webdriver.WebDriver and ExtendedWebDriver.\n// We do this because we use composition over inheritance to implement polymorphism, and therefore\n// we don't want to inherit WebDriver's constructor.\nclass AbstractWebDriver {\n}\nexports.AbstractWebDriver = AbstractWebDriver;\nclass AbstractExtendedWebDriver extends AbstractWebDriver {\n}\nexports.AbstractExtendedWebDriver = AbstractExtendedWebDriver;\n/**\n * Mix a function from one object onto another. The function will still be\n * called in the context of the original object.  Any arguments of type\n * `ElementFinder` will be unwrapped to their underlying `WebElement` instance\n *\n * @private\n * @param {Object} to\n * @param {Object} from\n * @param {string} fnName\n * @param {function=} setupFn\n */\nfunction ptorMixin(to, from, fnName, setupFn) {\n    to[fnName] = function () {\n        const args = arguments;\n        for (let i = 0; i < args.length; i++) {\n            if (args[i] instanceof element_1.ElementFinder) {\n                args[i] = args[i].getWebElement();\n            }\n        }\n        const run = () => {\n            return from[fnName].apply(from, args);\n        };\n        if (setupFn) {\n            const setupResult = setupFn();\n            if (setupResult && (typeof setupResult.then === 'function')) {\n                return setupResult.then(run);\n            }\n        }\n        return run();\n    };\n}\n;\n/**\n * Build the helper 'element' function for a given instance of Browser.\n *\n * @private\n * @param {Browser} browser A browser instance.\n * @returns {function(webdriver.Locator): ElementFinder}\n */\nfunction buildElementHelper(browser) {\n    let element = ((locator) => {\n        return new element_1.ElementArrayFinder(browser).all(locator).toElementFinder_();\n    });\n    element.all = (locator) => {\n        return new element_1.ElementArrayFinder(browser).all(locator);\n    };\n    return element;\n}\n;\n/**\n * @alias browser\n * @constructor\n * @extends {webdriver_extensions.ExtendedWebDriver}\n * @param {webdriver.WebDriver} webdriver\n * @param {string=} opt_baseUrl A base URL to run get requests against.\n * @param {string|webdriver.promise.Promise<string>=} opt_rootElement  Selector element that has an\n *     ng-app in scope.\n * @param {boolean=} opt_untrackOutstandingTimeouts Whether Protractor should\n *     stop tracking outstanding $timeouts.\n */\nclass ProtractorBrowser extends AbstractExtendedWebDriver {\n    constructor(webdriverInstance, opt_baseUrl, opt_rootElement, opt_untrackOutstandingTimeouts, opt_blockingProxyUrl) {\n        super();\n        // These functions should delegate to the webdriver instance, but should\n        // wait for Angular to sync up before performing the action. This does not\n        // include functions which are overridden by protractor below.\n        let methodsToSync = ['getCurrentUrl', 'getPageSource', 'getTitle'];\n        let extendWDInstance;\n        try {\n            extendWDInstance = webdriver_js_extender_1.extend(webdriverInstance);\n        }\n        catch (e) {\n            // Probably not a driver that can be extended (e.g. gotten using\n            // `directConnect: true` in the config)\n            extendWDInstance = webdriverInstance;\n        }\n        // Mix all other driver functionality into Protractor.\n        Object.getOwnPropertyNames(selenium_webdriver_1.WebDriver.prototype).forEach(method => {\n            if (!this[method] && typeof extendWDInstance[method] === 'function') {\n                if (methodsToSync.indexOf(method) !== -1) {\n                    ptorMixin(this, extendWDInstance, method, this.waitForAngular.bind(this));\n                }\n                else {\n                    ptorMixin(this, extendWDInstance, method);\n                }\n            }\n        });\n        this.driver = extendWDInstance;\n        if (opt_blockingProxyUrl) {\n            logger.info('Starting BP client for ' + opt_blockingProxyUrl);\n            this.bpClient = new blocking_proxy_1.BPClient(opt_blockingProxyUrl);\n        }\n        this.element = buildElementHelper(this);\n        this.$ = element_1.build$(this.element, selenium_webdriver_1.By);\n        this.$$ = element_1.build$$(this.element, selenium_webdriver_1.By);\n        this.baseUrl = opt_baseUrl || '';\n        this.getPageTimeout = DEFAULT_GET_PAGE_TIMEOUT;\n        this.params = {};\n        this.resetUrl = DEFAULT_RESET_URL;\n        let ng12Hybrid_ = false;\n        Object.defineProperty(this, 'ng12Hybrid', {\n            get: function () {\n                return ng12Hybrid_;\n            },\n            set: function (ng12Hybrid) {\n                if (ng12Hybrid) {\n                    logger.warn('You have set ng12Hybrid.  As of Protractor 4.1.0, ' +\n                        'Protractor can automatically infer if you are using an ' +\n                        'ngUpgrade app (as long as ng1 is loaded before you call ' +\n                        'platformBrowserDynamic()), and this flag is no longer needed ' +\n                        'for most users');\n                }\n                ng12Hybrid_ = ng12Hybrid;\n            }\n        });\n        this.ready = this.angularAppRoot(opt_rootElement || '')\n            .then(() => {\n            return this.driver.getSession();\n        })\n            .then((session) => {\n            // Internet Explorer does not accept data URLs, which are the default\n            // reset URL for Protractor.\n            // Safari accepts data urls, but SafariDriver fails after one is used.\n            // PhantomJS produces a \"Detected a page unload event\" if we use data urls\n            let browserName = session.getCapabilities().get('browserName');\n            if (browserName === 'internet explorer' || browserName === 'safari' ||\n                browserName === 'phantomjs' || browserName === 'MicrosoftEdge') {\n                this.resetUrl = 'about:blank';\n            }\n            return this;\n        });\n        this.trackOutstandingTimeouts_ = !opt_untrackOutstandingTimeouts;\n        this.mockModules_ = [];\n        this.addBaseMockModules_();\n        // set up expected conditions\n        this.ExpectedConditions = new expectedConditions_1.ProtractorExpectedConditions(this);\n    }\n    /**\n     * The css selector for an element on which to find Angular. This is usually\n     * 'body' but if your ng-app is on a subsection of the page it may be\n     * a subelement.\n     *\n     * This property is deprecated - please use angularAppRoot() instead.\n     *\n     * @deprecated\n     * @type {string}\n     */\n    set rootEl(value) {\n        this.angularAppRoot(value);\n    }\n    get rootEl() {\n        return this.internalRootEl;\n    }\n    /**\n     * Set the css selector for an element on which to find Angular. This is usually\n     * 'body' but if your ng-app is on a subsection of the page it may be\n     * a subelement.\n     *\n     * The change will be made within WebDriver's control flow, so that commands after\n     * this method is called use the new app root. Pass nothing to get a promise that\n     * resolves to the value of the selector.\n     *\n     * @param {string|webdriver.promise.Promise<string>} value The new selector.\n     * @returns A promise that resolves with the value of the selector.\n     */\n    angularAppRoot(value = null) {\n        return this.driver.controlFlow().execute(() => {\n            if (value != null) {\n                return selenium_webdriver_1.promise.when(value).then((value) => {\n                    this.internalRootEl = value;\n                    if (this.bpClient) {\n                        const bpCommandPromise = this.bpClient.setWaitParams(value);\n                        // Convert to webdriver promise as best as possible\n                        return selenium_webdriver_1.promise.when(bpCommandPromise).then(() => this.internalRootEl);\n                    }\n                    return this.internalRootEl;\n                });\n            }\n            return selenium_webdriver_1.promise.when(this.internalRootEl);\n        }, `Set angular root selector to ${value}`);\n    }\n    /**\n     * If true, Protractor will not attempt to synchronize with the page before\n     * performing actions. This can be harmful because Protractor will not wait\n     * until $timeouts and $http calls have been processed, which can cause\n     * tests to become flaky. This should be used only when necessary, such as\n     * when a page continuously polls an API using $timeout.\n     *\n     * Initialized to `false` by the runner.\n     *\n     * This property is deprecated - please use waitForAngularEnabled instead.\n     *\n     * @deprecated\n     * @type {boolean}\n     */\n    set ignoreSynchronization(value) {\n        this.waitForAngularEnabled(!value);\n    }\n    get ignoreSynchronization() {\n        return this.internalIgnoreSynchronization;\n    }\n    /**\n     * If set to false, Protractor will not wait for Angular $http and $timeout\n     * tasks to complete before interacting with the browser. This can cause\n     * flaky tests, but should be used if, for instance, your app continuously\n     * polls an API with $timeout.\n     *\n     * Call waitForAngularEnabled() without passing a value to read the current\n     * state without changing it.\n     */\n    waitForAngularEnabled(enabled = null) {\n        if (enabled != null) {\n            const ret = this.driver.controlFlow().execute(() => {\n                return selenium_webdriver_1.promise.when(enabled).then((enabled) => {\n                    if (this.bpClient) {\n                        logger.debug('Setting waitForAngular' + !enabled);\n                        const bpCommandPromise = this.bpClient.setWaitEnabled(enabled);\n                        // Convert to webdriver promise as best as possible\n                        return selenium_webdriver_1.promise.when(bpCommandPromise).then(() => enabled);\n                    }\n                });\n            }, `Set proxy synchronization enabled to ${enabled}`);\n            this.internalIgnoreSynchronization = !enabled;\n            return ret;\n        }\n        return selenium_webdriver_1.promise.when(!this.ignoreSynchronization);\n    }\n    /**\n     * Get the processed configuration object that is currently being run. This\n     * will contain the specs and capabilities properties of the current runner\n     * instance.\n     *\n     * Set by the runner.\n     *\n     * @returns {webdriver.promise.Promise} A promise which resolves to the\n     * capabilities object.\n     */\n    getProcessedConfig() {\n        return null;\n    }\n    /**\n     * Fork another instance of browser for use in interactive tests.\n     *\n     * @example\n     * // Running with control flow enabled\n     * var fork = browser.forkNewDriverInstance();\n     * fork.get('page1'); // 'page1' gotten by forked browser\n     *\n     * // Running with control flow disabled\n     * var forked = await browser.forkNewDriverInstance().ready;\n     * await forked.get('page1'); // 'page1' gotten by forked browser\n     *\n     * @param {boolean=} useSameUrl Whether to navigate to current url on creation\n     * @param {boolean=} copyMockModules Whether to apply same mock modules on creation\n     * @param {boolean=} copyConfigUpdates Whether to copy over changes to `baseUrl` and similar\n     *   properties initialized to values in the the config.  Defaults to `true`\n     *\n     * @returns {ProtractorBrowser} A browser instance.\n     */\n    forkNewDriverInstance(useSameUrl, copyMockModules, copyConfigUpdates = true) {\n        return null;\n    }\n    /**\n     * Restart the browser.  This is done by closing this browser instance and creating a new one.\n     * A promise resolving to the new instance is returned, and if this function was called on the\n     * global `browser` instance then Protractor will automatically overwrite the global `browser`\n     * variable.\n     *\n     * When restarting a forked browser, it is the caller's job to overwrite references to the old\n     * instance.\n     *\n     * This function behaves slightly differently depending on if the webdriver control flow is\n     * enabled.  If the control flow is enabled, the global `browser` object is synchronously\n     * replaced. If the control flow is disabled, the global `browser` is replaced asynchronously\n     * after the old driver quits.\n     *\n     * Set by the runner.\n     *\n     * @example\n     * // Running against global browser, with control flow enabled\n     * browser.get('page1');\n     * browser.restart();\n     * browser.get('page2'); // 'page2' gotten by restarted browser\n     *\n     * // Running against global browser, with control flow disabled\n     * await browser.get('page1');\n     * await browser.restart();\n     * await browser.get('page2'); // 'page2' gotten by restarted browser\n     *\n     * // Running against forked browsers, with the control flow enabled\n     * // In this case, you may prefer `restartSync` (documented below)\n     * var forked = browser.forkNewDriverInstance();\n     * fork.get('page1');\n     * fork.restart().then(function(fork) {\n     *   fork.get('page2'); // 'page2' gotten by restarted fork\n     * });\n     *\n     * // Running against forked browsers, with the control flow disabled\n     * var forked = await browser.forkNewDriverInstance().ready;\n     * await fork.get('page1');\n     * fork = await fork.restart();\n     * await fork.get('page2'); // 'page2' gotten by restarted fork\n     *\n     * // Unexpected behavior can occur if you save references to the global `browser`\n     * var savedBrowser = browser;\n     * browser.get('foo').then(function() {\n     *   console.log(browser === savedBrowser); // false\n     * });\n     * browser.restart();\n     *\n     * @returns {webdriver.promise.Promise<ProtractorBrowser>} A promise resolving to the restarted\n     *   browser\n     */\n    restart() {\n        return;\n    }\n    /**\n     * Like `restart`, but instead of returning a promise resolving to the new browser instance,\n     * returns the new browser instance directly.  Can only be used when the control flow is enabled.\n     *\n     * @example\n     * // Running against global browser\n     * browser.get('page1');\n     * browser.restartSync();\n     * browser.get('page2'); // 'page2' gotten by restarted browser\n     *\n     * // Running against forked browsers\n     * var forked = browser.forkNewDriverInstance();\n     * fork.get('page1');\n     * fork = fork.restartSync();\n     * fork.get('page2'); // 'page2' gotten by restarted fork\n     *\n     * @throws {TypeError} Will throw an error if the control flow is not enabled\n     * @returns {ProtractorBrowser} The restarted browser\n     */\n    restartSync() {\n        return;\n    }\n    /**\n     * Instead of using a single root element, search through all angular apps\n     * available on the page when finding elements or waiting for stability.\n     * Only compatible with Angular2.\n     */\n    useAllAngular2AppRoots() {\n        // The empty string is an invalid css selector, so we use it to easily\n        // signal to scripts to not find a root element.\n        this.angularAppRoot('');\n    }\n    /**\n     * The same as {@code webdriver.WebDriver.prototype.executeScript},\n     * but with a customized description for debugging.\n     *\n     * @private\n     * @param {!(string|Function)} script The script to execute.\n     * @param {string} description A description of the command for debugging.\n     * @param {...*} var_args The arguments to pass to the script.\n     * @returns {!webdriver.promise.Promise.<T>} A promise that will resolve to\n     * the scripts return value.\n     * @template T\n     */\n    executeScriptWithDescription(script, description, ...scriptArgs) {\n        if (typeof script === 'function') {\n            script = 'return (' + script + ').apply(null, arguments);';\n        }\n        return this.driver.schedule(new Command(CommandName.EXECUTE_SCRIPT)\n            .setParameter('script', script)\n            .setParameter('args', scriptArgs), description);\n    }\n    /**\n     * The same as {@code webdriver.WebDriver.prototype.executeAsyncScript},\n     * but with a customized description for debugging.\n     *\n     * @private\n     * @param {!(string|Function)} script The script to execute.\n     * @param {string} description A description for debugging purposes.\n     * @param {...*} var_args The arguments to pass to the script.\n     * @returns {!webdriver.promise.Promise.<T>} A promise that will resolve to\n     * the\n     *    scripts return value.\n     * @template T\n     */\n    executeAsyncScript_(script, description, ...scriptArgs) {\n        if (typeof script === 'function') {\n            script = 'return (' + script + ').apply(null, arguments);';\n        }\n        return this.driver.schedule(new Command(CommandName.EXECUTE_ASYNC_SCRIPT)\n            .setParameter('script', script)\n            .setParameter('args', scriptArgs), description);\n    }\n    /**\n     * Instruct webdriver to wait until Angular has finished rendering and has\n     * no outstanding $http or $timeout calls before continuing.\n     * Note that Protractor automatically applies this command before every\n     * WebDriver action.\n     *\n     * @param {string=} opt_description An optional description to be added\n     *     to webdriver logs.\n     * @returns {!webdriver.promise.Promise} A promise that will resolve to the\n     *    scripts return value.\n     */\n    waitForAngular(opt_description) {\n        let description = opt_description ? ' - ' + opt_description : '';\n        if (this.ignoreSynchronization) {\n            return this.driver.controlFlow().execute(() => {\n                return true;\n            }, 'Ignore Synchronization Protractor.waitForAngular()');\n        }\n        let runWaitForAngularScript = () => {\n            if (this.plugins_.skipAngularStability() || this.bpClient) {\n                return this.driver.controlFlow().execute(() => {\n                    return selenium_webdriver_1.promise.when(null);\n                }, 'bpClient or plugin stability override');\n            }\n            else {\n                // Need to wrap this so that we read rootEl in the control flow, not synchronously.\n                return this.angularAppRoot().then((rootEl) => {\n                    return this.executeAsyncScript_(clientSideScripts.waitForAngular, 'Protractor.waitForAngular()' + description, rootEl);\n                });\n            }\n        };\n        return runWaitForAngularScript()\n            .then((browserErr) => {\n            if (browserErr) {\n                throw new Error('Error while waiting for Protractor to ' +\n                    'sync with the page: ' + JSON.stringify(browserErr));\n            }\n        })\n            .then(() => {\n            return this.driver.controlFlow()\n                .execute(() => {\n                return this.plugins_.waitForPromise(this);\n            }, 'Plugins.waitForPromise()')\n                .then(() => {\n                return this.driver.wait(() => {\n                    return this.plugins_.waitForCondition(this).then((results) => {\n                        return results.reduce((x, y) => x && y, true);\n                    });\n                }, this.allScriptsTimeout, 'Plugins.waitForCondition()');\n            });\n        }, (err) => {\n            let timeout;\n            if (/asynchronous script timeout/.test(err.message)) {\n                // Timeout on Chrome\n                timeout = /-?[\\d\\.]*\\ seconds/.exec(err.message);\n            }\n            else if (/Timed out waiting for async script/.test(err.message)) {\n                // Timeout on Firefox\n                timeout = /-?[\\d\\.]*ms/.exec(err.message);\n            }\n            else if (/Timed out waiting for an asynchronous script/.test(err.message)) {\n                // Timeout on Safari\n                timeout = /-?[\\d\\.]*\\ ms/.exec(err.message);\n            }\n            if (timeout) {\n                let errMsg = `Timed out waiting for asynchronous Angular tasks to finish after ` +\n                    `${timeout}. This may be because the current page is not an Angular ` +\n                    `application. Please see the FAQ for more details: ` +\n                    `https://github.com/angular/protractor/blob/master/docs/timeouts.md#waiting-for-angular`;\n                if (description.indexOf(' - Locator: ') == 0) {\n                    errMsg += '\\nWhile waiting for element with locator' + description;\n                }\n                let pendingTimeoutsPromise;\n                if (this.trackOutstandingTimeouts_) {\n                    pendingTimeoutsPromise = this.executeScriptWithDescription('return window.NG_PENDING_TIMEOUTS', 'Protractor.waitForAngular() - getting pending timeouts' + description);\n                }\n                else {\n                    pendingTimeoutsPromise = selenium_webdriver_1.promise.when({});\n                }\n                let pendingHttpsPromise = this.executeScriptWithDescription(clientSideScripts.getPendingHttpRequests, 'Protractor.waitForAngular() - getting pending https' + description, this.internalRootEl);\n                return selenium_webdriver_1.promise.all([pendingTimeoutsPromise, pendingHttpsPromise])\n                    .then((arr) => {\n                    let pendingTimeouts = arr[0] || [];\n                    let pendingHttps = arr[1] || [];\n                    let key, pendingTasks = [];\n                    for (key in pendingTimeouts) {\n                        if (pendingTimeouts.hasOwnProperty(key)) {\n                            pendingTasks.push(' - $timeout: ' + pendingTimeouts[key]);\n                        }\n                    }\n                    for (key in pendingHttps) {\n                        pendingTasks.push(' - $http: ' + pendingHttps[key].url);\n                    }\n                    if (pendingTasks.length) {\n                        errMsg += '. \\nThe following tasks were pending:\\n';\n                        errMsg += pendingTasks.join('\\n');\n                    }\n                    err.message = errMsg;\n                    throw err;\n                }, () => {\n                    err.message = errMsg;\n                    throw err;\n                });\n            }\n            else {\n                throw err;\n            }\n        });\n    }\n    /**\n     * Waits for Angular to finish rendering before searching for elements.\n     * @see webdriver.WebDriver.findElement\n     * @returns {!webdriver.WebElementPromise} A promise that will be resolved to\n     *      the located {@link webdriver.WebElement}.\n     */\n    findElement(locator) {\n        return this.element(locator).getWebElement();\n    }\n    /**\n     * Waits for Angular to finish rendering before searching for elements.\n     * @see webdriver.WebDriver.findElements\n     * @returns {!webdriver.promise.Promise} A promise that will be resolved to an\n     *     array of the located {@link webdriver.WebElement}s.\n     */\n    findElements(locator) {\n        return this.element.all(locator).getWebElements();\n    }\n    /**\n     * Tests if an element is present on the page.\n     * @see webdriver.WebDriver.isElementPresent\n     * @returns {!webdriver.promise.Promise} A promise that will resolve to whether\n     *     the element is present on the page.\n     */\n    isElementPresent(locatorOrElement) {\n        let element;\n        if (locatorOrElement instanceof element_1.ElementFinder) {\n            element = locatorOrElement;\n        }\n        else if (locatorOrElement instanceof selenium_webdriver_1.WebElement) {\n            element = element_1.ElementFinder.fromWebElement_(this, locatorOrElement);\n        }\n        else {\n            element = this.element(locatorOrElement);\n        }\n        return element.isPresent();\n    }\n    /**\n     * Add a module to load before Angular whenever Protractor.get is called.\n     * Modules will be registered after existing modules already on the page,\n     * so any module registered here will override preexisting modules with the\n     * same name.\n     *\n     * @example\n     * browser.addMockModule('modName', function() {\n     *   angular.module('modName', []).value('foo', 'bar');\n     * });\n     *\n     * @param {!string} name The name of the module to load or override.\n     * @param {!string|Function} script The JavaScript to load the module.\n     *     Note that this will be executed in the browser context, so it cannot\n     *     access variables from outside its scope.\n     * @param {...*} varArgs Any additional arguments will be provided to\n     *     the script and may be referenced using the `arguments` object.\n     */\n    addMockModule(name, script, ...moduleArgs) {\n        this.mockModules_.push({ name: name, script: script, args: moduleArgs });\n    }\n    /**\n     * Clear the list of registered mock modules.\n     */\n    clearMockModules() {\n        this.mockModules_ = [];\n        this.addBaseMockModules_();\n    }\n    /**\n     * Remove a registered mock module.\n     *\n     * @example\n     * browser.removeMockModule('modName');\n     *\n     * @param {!string} name The name of the module to remove.\n     */\n    removeMockModule(name) {\n        for (let i = 0; i < this.mockModules_.length; ++i) {\n            if (this.mockModules_[i].name == name) {\n                this.mockModules_.splice(i--, 1);\n            }\n        }\n    }\n    /**\n     * Get a list of the current mock modules.\n     *\n     * @returns {Array.<!string|Function>} The list of mock modules.\n     */\n    getRegisteredMockModules() {\n        return this.mockModules_.map(module => module.script);\n    }\n    ;\n    /**\n     * Add the base mock modules used for all Protractor tests.\n     *\n     * @private\n     */\n    addBaseMockModules_() {\n        this.addMockModule('protractorBaseModule_', clientSideScripts.protractorBaseModuleFn, this.trackOutstandingTimeouts_);\n    }\n    /**\n     * @see webdriver.WebDriver.get\n     *\n     * Navigate to the given destination and loads mock modules before\n     * Angular. Assumes that the page being loaded uses Angular.\n     * If you need to access a page which does not have Angular on load, use\n     * the wrapped webdriver directly.\n     *\n     * @example\n     * browser.get('https://angularjs.org/');\n     * expect(browser.getCurrentUrl()).toBe('https://angularjs.org/');\n     *\n     * @param {string} destination Destination URL.\n     * @param {number=} opt_timeout Number of milliseconds to wait for Angular to\n     *     start.\n     */\n    get(destination, timeout = this.getPageTimeout) {\n        destination = this.baseUrl.indexOf('file://') === 0 ? this.baseUrl + destination :\n            url.resolve(this.baseUrl, destination);\n        if (this.ignoreSynchronization) {\n            return this.driver.get(destination)\n                .then(() => this.driver.controlFlow().execute(() => this.plugins_.onPageLoad(this)))\n                .then(() => null);\n        }\n        let msg = (str) => {\n            return 'Protractor.get(' + destination + ') - ' + str;\n        };\n        return this.driver.controlFlow()\n            .execute(() => {\n            return selenium_webdriver_1.promise.when(null);\n        })\n            .then(() => {\n            if (this.bpClient) {\n                return this.driver.controlFlow().execute(() => {\n                    return this.bpClient.setWaitEnabled(false);\n                });\n            }\n        })\n            .then(() => {\n            // Go to reset url\n            return this.driver.get(this.resetUrl);\n        })\n            .then(() => {\n            // Set defer label and navigate\n            return this.executeScriptWithDescription('window.name = \"' + DEFER_LABEL + '\" + window.name;' +\n                'window.location.replace(\"' + destination + '\");', msg('reset url'));\n        })\n            .then(() => {\n            // We need to make sure the new url has loaded before\n            // we try to execute any asynchronous scripts.\n            return this.driver.wait(() => {\n                return this.executeScriptWithDescription('return window.location.href;', msg('get url'))\n                    .then((url) => {\n                    return url !== this.resetUrl;\n                }, (err) => {\n                    if (err.code == 13 || err.name === 'JavascriptError') {\n                        // Ignore the error, and continue trying. This is\n                        // because IE driver sometimes (~1%) will throw an\n                        // unknown error from this execution. See\n                        // https://github.com/angular/protractor/issues/841\n                        // This shouldn't mask errors because it will fail\n                        // with the timeout anyway.\n                        return false;\n                    }\n                    else {\n                        throw err;\n                    }\n                });\n            }, timeout, 'waiting for page to load for ' + timeout + 'ms');\n        })\n            .then(() => {\n            // Run Plugins\n            return this.driver.controlFlow().execute(() => {\n                return this.plugins_.onPageLoad(this);\n            });\n        })\n            .then(() => {\n            // Make sure the page is an Angular page.\n            return this\n                .executeAsyncScript_(clientSideScripts.testForAngular, msg('test for angular'), Math.floor(timeout / 1000), this.ng12Hybrid)\n                .then((angularTestResult) => {\n                let angularVersion = angularTestResult.ver;\n                if (!angularVersion) {\n                    let message = angularTestResult.message;\n                    logger.error(`Could not find Angular on page ${destination} : ${message}`);\n                    throw new Error(`Angular could not be found on the page ${destination}. ` +\n                        `If this is not an Angular application, you may need to turn off waiting for Angular.\n                          Please see \n                          https://github.com/angular/protractor/blob/master/docs/timeouts.md#waiting-for-angular-on-page-load`);\n                }\n                return angularVersion;\n            }, (err) => {\n                throw new Error('Error while running testForAngular: ' + err.message);\n            });\n        })\n            .then((angularVersion) => {\n            // Load Angular Mocks\n            if (angularVersion === 1) {\n                // At this point, Angular will pause for us until angular.resumeBootstrap is called.\n                let moduleNames = [];\n                let modulePromise = selenium_webdriver_1.promise.when(null);\n                for (const { name, script, args } of this.mockModules_) {\n                    moduleNames.push(name);\n                    let executeScriptArgs = [script, msg('add mock module ' + name), ...args];\n                    modulePromise = modulePromise.then(() => this.executeScriptWithDescription.apply(this, executeScriptArgs)\n                        .then(null, (err) => {\n                        throw new Error('Error while running module script ' + name + ': ' + err.message);\n                    }));\n                }\n                return modulePromise.then(() => this.executeScriptWithDescription('window.__TESTABILITY__NG1_APP_ROOT_INJECTOR__ = ' +\n                    'angular.resumeBootstrap(arguments[0]);', msg('resume bootstrap'), moduleNames));\n            }\n            else {\n                // TODO: support mock modules in Angular2. For now, error if someone\n                // has tried to use one.\n                if (this.mockModules_.length > 1) {\n                    throw 'Trying to load mock modules on an Angular v2+ app is not yet supported.';\n                }\n            }\n        })\n            .then(() => {\n            // Reset bpClient sync\n            if (this.bpClient) {\n                return this.driver.controlFlow().execute(() => {\n                    return this.bpClient.setWaitEnabled(!this.internalIgnoreSynchronization);\n                });\n            }\n        })\n            .then(() => {\n            // Run Plugins\n            return this.driver.controlFlow().execute(() => {\n                return this.plugins_.onPageStable(this);\n            });\n        })\n            .then(() => null);\n    }\n    /**\n     * @see webdriver.WebDriver.refresh\n     *\n     * Makes a full reload of the current page and loads mock modules before\n     * Angular. Assumes that the page being loaded uses Angular.\n     * If you need to access a page which does not have Angular on load, use\n     * the wrapped webdriver directly.\n     *\n     * @param {number=} opt_timeout Number of milliseconds to wait for Angular to start.\n     */\n    refresh(opt_timeout) {\n        if (this.ignoreSynchronization) {\n            return this.driver.navigate().refresh();\n        }\n        return this\n            .executeScriptWithDescription('return window.location.href', 'Protractor.refresh() - getUrl')\n            .then((href) => {\n            return this.get(href, opt_timeout);\n        });\n    }\n    /**\n     * Mixin navigation methods back into the navigation object so that\n     * they are invoked as before, i.e. driver.navigate().refresh()\n     */\n    navigate() {\n        let nav = this.driver.navigate();\n        ptorMixin(nav, this, 'refresh');\n        return nav;\n    }\n    /**\n     * Browse to another page using in-page navigation.\n     *\n     * @example\n     * browser.get('http://angular.github.io/protractor/#/tutorial');\n     * browser.setLocation('api');\n     * expect(browser.getCurrentUrl())\n     *     .toBe('http://angular.github.io/protractor/#/api');\n     *\n     * @param {string} url In page URL using the same syntax as $location.url()\n     * @returns {!webdriver.promise.Promise} A promise that will resolve once\n     *    page has been changed.\n     */\n    setLocation(url) {\n        return this.waitForAngular()\n            .then(() => this.angularAppRoot())\n            .then((rootEl) => this.executeScriptWithDescription(clientSideScripts.setLocation, 'Protractor.setLocation()', rootEl, url)\n            .then((browserErr) => {\n            if (browserErr) {\n                throw 'Error while navigating to \\'' + url +\n                    '\\' : ' + JSON.stringify(browserErr);\n            }\n        }));\n    }\n    /**\n     * Deprecated, use `browser.getCurrentUrl()` instead.\n     *\n     * Despite its name, this function will generally return `$location.url()`, though in some\n     * cases it will return `$location.absUrl()` instead.  This function is only here for legacy\n     * users, and will probably be removed in Protractor 6.0.\n     *\n     * @deprecated Please use `browser.getCurrentUrl()`\n     * @example\n     * browser.get('http://angular.github.io/protractor/#/api');\n     * expect(browser.getLocationAbsUrl())\n     *     .toBe('http://angular.github.io/protractor/#/api');\n     * @returns {webdriver.promise.Promise<string>} The current absolute url from\n     * AngularJS.\n     */\n    getLocationAbsUrl() {\n        logger.warn('`browser.getLocationAbsUrl()` is deprecated, please use `browser.getCurrentUrl` instead.');\n        return this.waitForAngular()\n            .then(() => this.angularAppRoot())\n            .then((rootEl) => this.executeScriptWithDescription(clientSideScripts.getLocationAbsUrl, 'Protractor.getLocationAbsUrl()', rootEl));\n    }\n    /**\n     * Determine if the control flow is enabled.\n     *\n     * @returns true if the control flow is enabled, false otherwise.\n     */\n    controlFlowIsEnabled() {\n        if (selenium_webdriver_1.promise.USE_PROMISE_MANAGER !== undefined) {\n            return selenium_webdriver_1.promise.USE_PROMISE_MANAGER;\n        }\n        else {\n            // True for old versions of `selenium-webdriver`, probably false in >=5.0.0\n            return !!selenium_webdriver_1.promise.ControlFlow;\n        }\n    }\n}\n/**\n * @type {ProtractorBy}\n */\nProtractorBrowser.By = new locators_1.ProtractorBy();\nexports.ProtractorBrowser = ProtractorBrowser;\n"]},"metadata":{},"sourceType":"script"}